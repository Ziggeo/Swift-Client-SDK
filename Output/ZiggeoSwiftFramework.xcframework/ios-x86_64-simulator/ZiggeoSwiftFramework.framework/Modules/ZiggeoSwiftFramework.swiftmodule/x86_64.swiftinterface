// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.2 (swiftlang-1200.0.45 clang-1200.0.32.28)
// swift-module-flags: -target x86_64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZiggeoSwiftFramework
import AVFoundation
import AVKit
import Accelerate
import Foundation
import GoogleInteractiveMediaAds
import MobileCoreServices
import Photos
import PhotosUI
import ReplayKit
import Swift
import UIKit
@_exported import ZiggeoSwiftFramework
@objc open class ZiggeoConfig : ObjectiveC.NSObject {
  open var serverAPIUrl: Swift.String
  open var cdnAPIUrl: Swift.String
  open var devServerApiUrl: Swift.String
  open var fileServerUrl: Swift.String
  public init(token: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class BaseNibView : UIKit.UIView {
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func awakeFromNib()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CoverSelectorTableCell : UIKit.UITableViewCell {
  @objc deinit
  @available(iOS 3.0, *)
  @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
@_hasMissingDesignatedInitializers final public class AudioContext {
  final public let audioURL: Foundation.URL
  final public let totalSamples: Swift.Int
  final public let asset: AVFoundation.AVAsset
  final public let assetTrack: AVFoundation.AVAssetTrack
  public static func load(fromAudioURL audioURL: Foundation.URL, completionHandler: @escaping (ZiggeoSwiftFramework.AudioContext?) -> ())
  final public func render(targetSamples: Swift.Int = 100) -> [Swift.Float]
  @objc deinit
}
@objc open class ZiggeoAudioRecorder : UIKit.UIViewController {
  public enum AudioRecordState {
    case ready
    case recording
    case recorded
    case playing
    case paused
    public static func == (a: ZiggeoSwiftFramework.ZiggeoAudioRecorder.AudioRecordState, b: ZiggeoSwiftFramework.ZiggeoAudioRecorder.AudioRecordState) -> Swift.Bool
    public var hashValue: Swift.Int {
      get
    }
    public func hash(into hasher: inout Swift.Hasher)
  }
  public init(application: ZiggeoSwiftFramework.Ziggeo)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  @objc @IBAction open func onClose(_ sender: Swift.AnyObject)
  @objc @IBAction open func onRerecord(_ sender: Swift.AnyObject)
  @objc @IBAction open func onRecord(_ sender: Swift.AnyObject)
  @objc @IBAction open func onUpload(_ sender: Swift.AnyObject)
  @objc @IBAction open func timeChanged(_ sender: UIKit.UISlider)
  open func setCurrentState(_ state: ZiggeoSwiftFramework.ZiggeoAudioRecorder.AudioRecordState)
  open func stopTimer()
  open func getTimeString(_ time: Swift.Int) -> Swift.String
  open func updateCurrentTimeText()
  open func getImageFromResource(_ resourceName: Swift.String) -> UIKit.UIImage
  open func getAudioVisualizationMode() -> ZiggeoSwiftFramework.AudioVisualizationView.AudioVisualizationMode
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension XML {
  open class Element {
    open var name: Swift.String
    open var text: Swift.String?
    open var attributes: [Swift.String : Swift.String]
    open var childElements: [ZiggeoSwiftFramework.XML.Element]
    weak open var parentElement: ZiggeoSwiftFramework.XML.Element?
    public init(name: Swift.String)
    @objc deinit
  }
}
public class ZiggeoRecorderInterfaceConfig {
  public var recordButton: ZiggeoSwiftFramework.ButtonConfig
  public var closeButton: ZiggeoSwiftFramework.ButtonConfig
  public var cameraFlipButton: ZiggeoSwiftFramework.ButtonConfig
  public init()
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ButtonConfig {
  public var imagePath: Swift.String?
  public var selectedImagePath: Swift.String?
  public var scale: CoreGraphics.CGFloat
  public var width: CoreGraphics.CGFloat?
  public var height: CoreGraphics.CGFloat?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class CapturePreviewView : UIKit.UIView {
  @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol VideoPreviewDelegate {
  func retake(_ fileToBeRemoved: Foundation.URL!)
  func uploadVideo(_ filePath: Foundation.URL)
}
public protocol VideoPreviewProtocol {
  var videoURL: Foundation.URL! { get set }
  var previewDelegate: ZiggeoSwiftFramework.VideoPreviewDelegate! { get set }
}
@objc open class RecordedVideoPreview : UIKit.UIViewController, ZiggeoSwiftFramework.VideoPreviewProtocol {
  open var videoURL: Foundation.URL!
  open var previewDelegate: ZiggeoSwiftFramework.VideoPreviewDelegate!
  @objc dynamic public init()
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  open func killPlayer()
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
public enum Media_Type {
  case video
  case audio
  case image
  public static func == (a: ZiggeoSwiftFramework.Media_Type, b: ZiggeoSwiftFramework.Media_Type) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum Ziggeo_Key_Type : Swift.String {
  case BYTES_SENT
  case BYTES_TOTAL
  case FILE_NAME
  case PATH
  case QR
  case TOKEN
  case PERMISSIONS
  case SOUND_LEVEL
  case SECONDS_LEFT
  case MILLIS_PASSED
  case MILLIS
  case FILES
  case VALUE
  case MEDIA_TYPES
  case BLUR_EFFECT
  case CLIENT_AUTH
  case SERVER_AUTH
  case TAGS
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public enum Ziggeo_Theme_Key_Type : Swift.String {
  case KEY_HIDE_RECORDER_CONTROLS
  case KEY_HIDE_PLAYER_CONTROLS
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol ZiggeoDelegate {
  @objc optional func ziggeoRecorderLuxMeter(_ luminousity: Swift.Double)
  @objc optional func ziggeoRecorderAudioMeter(_ audioLevel: Swift.Double)
  @objc optional func ziggeoRecorderFaceDetected(_ faceID: Swift.Int, rect: CoreGraphics.CGRect)
  @objc optional func ziggeoRecorderReady()
  @objc optional func ziggeoRecorderCanceled()
  @objc optional func ziggeoRecorderStarted()
  @objc optional func ziggeoRecorderStopped(_ path: Swift.String)
  @objc optional func ziggeoRecorderCurrentRecordedDurationSeconds(_ seconds: Swift.Double)
  @objc optional func ziggeoRecorderPlaying()
  @objc optional func ziggeoRecorderPaused()
  @objc optional func ziggeoRecorderRerecord()
  @objc optional func ziggeoRecorderManuallySubmitted()
  @objc optional func ziggeoStreamingStarted()
  @objc optional func ziggeoStreamingStopped()
  @objc optional func preparingToUpload(_ path: Swift.String)
  @objc optional func failedToUpload(_ path: Swift.String)
  @objc optional func uploadStarted(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, backgroundTask: Foundation.URLSessionTask)
  @objc optional func uploadProgress(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc optional func uploadFinished(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadVerified(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: Swift.Error?, json: Foundation.NSDictionary?)
  @objc optional func uploadProcessing(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadProcessed(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func delete(_ token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: Swift.Error?, json: Foundation.NSDictionary?)
  @objc optional func checkCameraPermission(_ granted: Swift.Bool)
  @objc optional func checkMicrophonePermission(_ granted: Swift.Bool)
  @objc optional func checkPhotoLibraryPermission(_ granted: Swift.Bool)
  @objc optional func checkHasCamera(_ hasCamera: Swift.Bool)
  @objc optional func checkHasMicrophone(_ hasMicrophone: Swift.Bool)
  @objc optional func ziggeoPlayerPlaying()
  @objc optional func ziggeoPlayerPaused()
  @objc optional func ziggeoPlayerEnded()
  @objc optional func ziggeoPlayerSeek(_ positionMillis: Swift.Double)
  @objc optional func ziggeoPlayerReadyToPlay()
}
@objc open class Ziggeo : ObjectiveC.NSObject {
  final public let token: Swift.String
  final public let config: ZiggeoSwiftFramework.ZiggeoConfig
  public var connect: ZiggeoSwiftFramework.ZiggeoConnect!
  public var cacheManager: ZiggeoSwiftFramework.ZiggeoCacheManager!
  public var enableDebugLogs: Swift.Bool
  public var uploadingHandler: ZiggeoSwiftFramework.ZiggeoUploadingHandler!
  public var delegate: ZiggeoSwiftFramework.ZiggeoDelegate?
  public init(token: Swift.String, delegate: ZiggeoSwiftFramework.ZiggeoDelegate)
  open func log(item: Swift.String)
  open func logError(item: Swift.String)
  open func getPathWithType(_ type: ZiggeoSwiftFramework.Media_Type, token: Swift.String) -> Swift.String
  public func recorderCacheConfig() -> [Swift.String : Any]
  public func recorderInterfaceConfig() -> [Swift.String : Any]
  public func uploadingConfig() -> [Swift.String : Any]
  public func extraArgsForRecorder() -> [Swift.String : Any]
  public func themeArgsForRecorder() -> [Swift.String : Any]
  public func extraArgsForPlayer() -> [Swift.String : Any]
  public func themeArgsForPlayer() -> [Swift.String : Any]
  public func playerCacheConfig() -> [Swift.String : Any]
  open func sendReport(_ array: [Any])
  open func sendEmailToSupport()
  open func setRecorderCacheConfig(_ config: [Swift.String : Any])
  open func setRecorderInterfaceConfig(_ config: [Swift.String : Any])
  open func setUploadingConfig(_ config: [Swift.String : Any])
  open func setLiveStreamingEnabled(_ enabled: Swift.Bool)
  open func setAutostartRecordingAfter(_ seconds: Swift.Int)
  open func setStartDelay(_ seconds: Swift.Int)
  open func setExtraArgsForRecorder(_ map: [Swift.String : Any])
  open func setThemeArgsForRecorder(_ map: [Swift.String : Any])
  open func setCoverSelectorEnabled(_ enabled: Swift.Bool)
  open func setMaxRecordingDuration(_ seconds: Swift.Int)
  open func setVideoWidth(_ width: Swift.Int)
  open func setVideoHeight(_ height: Swift.Int)
  open func setVideoBitrate(_ bitrate: Swift.Int)
  open func setAudioSampleRate(_ sampleRate: Swift.Int)
  open func setAudioBitrate(_ bitrate: Swift.Int)
  open func setCameraSwitchEnabled(_ enabled: Swift.Bool)
  open func setSendImmediately(_ sendImmediately: Swift.Bool)
  open func setQuality(_ quality: Swift.Int)
  open func setCamera(_ facing: Swift.Int)
  open func setUseFrontCamera(_ enabled: Swift.Bool)
  open func setBlurringEffect(_ enabled: Swift.Bool)
  open func setBlurringMaskColor(_ color: UIKit.UIColor)
  open func setBlurringMaskAlpha(_ alpha: CoreGraphics.CGFloat)
  open func setBlurringMaskImage(_ image: UIKit.UIImage?)
  open func record()
  open func startImageRecorder()
  open func startAudioRecorder()
  open func startAudioPlayer(_ token: Swift.String)
  open func showImage(_ token: Swift.String)
  open func startScreenRecorder()
  open func uploadFromPath(_ fileName: Swift.String, data: [Swift.String : Any])
  open func uploadFromFileSelector(_ data: [Swift.String : Any])
  open func cancelUpload(_ path: Swift.String?, _ delete_file: Swift.Bool)
  open func startQrScanner(_ data: [Swift.String : Any])
  open func playVideo(_ videoId: Swift.String)
  open func playFromUri(_ path_or_url: Swift.String)
  open func setExtraArgsForPlayer(_ map: [Swift.String : Any])
  open func setThemeArgsForPlayer(_ map: [Swift.String : Any])
  open func setPlayerCacheConfig(_ config: [Swift.String : Any])
  open func setAdsURL(_ url: Swift.String)
  @objc deinit
  @objc override dynamic public init()
}
extension Ziggeo : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoConnect : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  open var clientAuthToken: Swift.String?
  open var serverAuthToken: Swift.String?
  open func applicationDidEnterBackground()
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func appWakeupSignalTaskComplete(_ sessionID: Swift.String)
  open func formatURLRequest(_ request: Foundation.URLRequest) -> Swift.String
  open func uploadFileWithPath(_ path: Swift.String, parameters: Foundation.NSDictionary?, identifier: Swift.String, filePath: Swift.String, fileName: Swift.String, mimeType: Swift.String, fileExtension: Swift.String, callback: ((Foundation.Data?, Foundation.URLResponse?, Foundation.NSError?) -> Swift.Void)?, progress: ((Swift.Int64, Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  open func postRawDataWithPath(_ path: Swift.String, data: Foundation.Data, params: Foundation.NSDictionary?, callback: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestStringWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Swift.String?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestJSONWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestJSONArrayWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSArray?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getStringWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Swift.String?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getJsonArrayWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSArray?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func postWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func postJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func deleteWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.Data?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func deleteJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func addSessionData(_ data: Foundation.NSDictionary?, path: Swift.String, callback: @escaping (Foundation.NSDictionary?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask!
  open func getSession(callback: @escaping (Swift.String?, Swift.String?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask
  @objc override dynamic public init()
  @objc deinit
}
public protocol XMLSubscriptType {
}
extension Int : ZiggeoSwiftFramework.XMLSubscriptType {
}
extension String : ZiggeoSwiftFramework.XMLSubscriptType {
}
infix operator ?= : DefaultPrecedence
public func ?= <T>(lhs: inout T, rhs: T?)
infix operator ?<< : DefaultPrecedence
public func ?<< <T>(lhs: inout [T], rhs: T?)
@_hasMissingDesignatedInitializers open class XML {
  open class func parse(_ data: Foundation.Data) -> ZiggeoSwiftFramework.XML.Accessor
  open class func parse(_ str: Swift.String) throws -> ZiggeoSwiftFramework.XML.Accessor
  open class func parse(_ data: Foundation.Data, trimming manner: Foundation.CharacterSet) -> ZiggeoSwiftFramework.XML.Accessor
  open class func parse(_ str: Swift.String, trimming manner: Foundation.CharacterSet) throws -> ZiggeoSwiftFramework.XML.Accessor
  open class func document(_ accessor: ZiggeoSwiftFramework.XML.Accessor) throws -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @available(iOS 10.0, macCatalyst 13.0, *)
open class ZiggeoScreenRecorderSampleHandler : ReplayKit.RPBroadcastSampleHandler {
  open var isRecordingVideo: Swift.Bool
  open func getApplicationGroup() -> Swift.String
  @objc override dynamic public func broadcastStarted(withSetupInfo setupInfo: [Swift.String : ObjectiveC.NSObject]?)
  @objc override dynamic public func broadcastPaused()
  @objc override dynamic public func broadcastResumed()
  @objc override dynamic public func processSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, with sampleBufferType: ReplayKit.RPSampleBufferType)
  @objc override dynamic public func broadcastFinished()
  @objc deinit
  @objc override dynamic public init()
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoCacheManager : ObjectiveC.NSObject {
  open func getCacheDirectoryWithType(_ type: ZiggeoSwiftFramework.Media_Type) -> Swift.String
  open func getCacheFileNameWithType(_ type: ZiggeoSwiftFramework.Media_Type, token: Swift.String) -> Swift.String
  open func getCacheFilePathWithType(_ type: ZiggeoSwiftFramework.Media_Type, token: Swift.String) -> Swift.String
  open func trimCacheWithType(_ type: ZiggeoSwiftFramework.Media_Type)
  open func fileExists(_ filePath: Swift.String) -> Swift.Bool
  open func removeFile(_ filePath: Swift.String)
  open func getFileCreationDateWithDefaultDate(_ filePath: Swift.String) -> Foundation.Date?
  open func getFileSize(_ filePath: Swift.String) -> Swift.UInt64?
  @objc deinit
  @objc override dynamic public init()
}
@_inheritsConvenienceInitializers @objc public class ViewModel : ObjectiveC.NSObject {
  @objc public var audioFilePathLocal: Foundation.URL?
  @objc public var meteringLevels: [Swift.Float]?
  @objc public var audioMeteringLevelUpdate: ((Swift.Float) -> ())?
  @objc public var audioDidFinish: (() -> ())?
  @objc override dynamic public init()
  @objc public func askAudioRecordingPermission(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func startRecording(completion: @escaping (Foundation.URL?, [Swift.Float]?, Swift.Error?) -> Swift.Void)
  @objc public func stopRecording() throws
  @objc public func resetRecording() throws
  @objc public func startPlaying() -> Swift.Double
  @objc public func setCurrentTime(_ currentTime: Foundation.TimeInterval)
  @objc public func pausePlaying() throws
  @objc deinit
}
public protocol CoverSelectorDelegate {
  func coverSelected(_ videoPath: Swift.String, image: UIKit.UIImage!)
}
@objc open class CoverSelector : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  open var delegate: ZiggeoSwiftFramework.CoverSelectorDelegate!
  public init(videoPath: Swift.String)
  @objc override dynamic open func viewDidLoad()
  public static func getDefaultCover(_ path: Swift.String, callback: ((UIKit.UIImage?) -> Swift.Void)?)
  @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreGraphics.CGFloat
  @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
@objc @available(macCatalyst 13.0, *)
open class ZiggeoRecorder : UIKit.UIViewController, ZiggeoSwiftFramework.VideoPreviewDelegate, AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate, AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  open var coverSelectorEnabled: Swift.Bool
  open var recordedVideoPreviewEnabled: Swift.Bool
  open var cameraFlipButtonVisible: Swift.Bool
  open var cameraDevice: UIKit.UIImagePickerController.CameraDevice
  open var videoPreview: ZiggeoSwiftFramework.VideoPreviewProtocol!
  open var maxRecordedDurationSeconds: Swift.Double
  open var extraArgsForCreateVideo: [Swift.AnyHashable : Any]?
  open var duration: Swift.Double
  open var recorderUIConfig: ZiggeoSwiftFramework.ZiggeoRecorderInterfaceConfig
  open var showFaceOutline: Swift.Bool {
    get
    set(value)
  }
  open var showLightIndicator: Swift.Bool {
    get
    set(value)
  }
  open var showSoundIndicator: Swift.Bool {
    get
    set(value)
  }
  open var useFrontCamera: Swift.Bool
  open var useBlurringEffect: Swift.Bool
  open var blurringMaskColor: UIKit.UIColor
  open var blurringMaskAlpha: CoreGraphics.CGFloat
  open var blurringMaskImage: UIKit.UIImage?
  open var showControls: Swift.Bool {
    get
    set(newValue)
  }
  public convenience init(application: ZiggeoSwiftFramework.Ziggeo)
  public init(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String!)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func viewDidLoad()
  open func retake(_ fileToBeRemoved: Foundation.URL!)
  open func uploadVideo(_ filePath: Foundation.URL)
  @objc @IBAction open func onCloseButtonTap(_ sender: Swift.AnyObject)
  @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @objc override dynamic open func viewWillTransition(to size: CoreGraphics.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @objc @IBAction open func changeCamera(_ sender: Swift.AnyObject)
  @objc @IBAction open func focusAndExposeTap(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc @IBAction open func toggleMovieRecording(_ sender: Swift.AnyObject)
  open func processRecordedVideo(outputFileURL: Foundation.URL!, error: Swift.Error!)
  @objc public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
  @objc open func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
  open func focus(_ focusMode: AVFoundation.AVCaptureDevice.FocusMode, exposureMode: AVFoundation.AVCaptureDevice.ExposureMode, point: CoreGraphics.CGPoint, monitorSubjectAreaChange: Swift.Bool)
  open func setFlashMode(_ flashMode: AVFoundation.AVCaptureDevice.FlashMode, device: AVFoundation.AVCaptureDevice)
  @objc deinit
  @objc override dynamic public init(nibName nibNameOrNil: Swift.String?, bundle nibBundleOrNil: Foundation.Bundle?)
}
extension XML {
  @dynamicMemberLookup public enum Accessor : Swift.CustomStringConvertible, Swift.Sequence {
    case singleElement(ZiggeoSwiftFramework.XML.Element)
    case sequence([ZiggeoSwiftFramework.XML.Element])
    case failure(Swift.Error)
    public init(_ element: ZiggeoSwiftFramework.XML.Element)
    public init(_ sequence: [ZiggeoSwiftFramework.XML.Element])
    public init(_ error: Swift.Error)
    public subscript(dynamicMember member: Swift.String) -> ZiggeoSwiftFramework.XML.Accessor {
      get
    }
    public subscript(path: Swift.Array<ZiggeoSwiftFramework.XMLSubscriptType>) -> ZiggeoSwiftFramework.XML.Accessor {
      get
    }
    public subscript(path: ZiggeoSwiftFramework.XMLSubscriptType...) -> ZiggeoSwiftFramework.XML.Accessor {
      get
    }
    public var name: Swift.String? {
      get
    }
    public var text: Swift.String? {
      get
    }
    public var bool: Swift.Bool? {
      get
    }
    public var url: Foundation.URL? {
      get
    }
    public var int: Swift.Int? {
      get
    }
    public var double: Swift.Double? {
      get
    }
    public var attributes: [Swift.String : Swift.String] {
      get
    }
    public var all: [ZiggeoSwiftFramework.XML.Element]? {
      get
    }
    public var names: [Swift.String]? {
      get
    }
    public var error: Swift.Error? {
      get
    }
    public var element: ZiggeoSwiftFramework.XML.Element? {
      get
    }
    public var last: ZiggeoSwiftFramework.XML.Accessor {
      get
    }
    public var first: ZiggeoSwiftFramework.XML.Accessor {
      get
    }
    public func map<T>(_ transform: (ZiggeoSwiftFramework.XML.Accessor) -> T) -> [T]
    @available(*, renamed: "flatMap")
    public func mapWithSqueezeNil<T>(_ transform: (ZiggeoSwiftFramework.XML.Accessor) -> T?) -> [T]
    public func makeIterator() -> Swift.AnyIterator<ZiggeoSwiftFramework.XML.Accessor>
    public var description: Swift.String {
      get
    }
    public typealias Element = ZiggeoSwiftFramework.XML.Accessor
    public typealias Iterator = Swift.AnyIterator<ZiggeoSwiftFramework.XML.Accessor>
  }
}
extension XML {
  public class Converter {
    public init(_ accessor: ZiggeoSwiftFramework.XML.Accessor)
    public func makeDocument() throws -> Swift.String
    @objc deinit
  }
}
@objc @_hasMissingDesignatedInitializers public class AudioVisualizationView : ZiggeoSwiftFramework.BaseNibView {
  @objc public enum AudioVisualizationMode : Swift.Int {
    case read = 0
    case write = 1
    public typealias RawValue = Swift.Int
    public init?(rawValue: Swift.Int)
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @IBInspectable public var meteringLevelBarWidth: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable public var meteringLevelBarInterItem: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable public var meteringLevelBarCornerRadius: CoreGraphics.CGFloat {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable public var meteringLevelBarSingleStick: Swift.Bool {
    @objc get
    @objc set(value)
  }
  @objc public var audioVisualizationMode: ZiggeoSwiftFramework.AudioVisualizationView.AudioVisualizationMode
  public var audioVisualizationTimeInterval: Swift.Double
  public var currentGradientPercentage: Swift.Float?
  @objc public var meteringLevels: [Swift.Float]? {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable public var gradientStartColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc @IBInspectable public var gradientEndColor: UIKit.UIColor {
    @objc get
    @objc set(value)
  }
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic public func draw(_ rect: CoreGraphics.CGRect)
  @objc public func reset()
  @objc public func add(meteringLevel: Swift.Float)
  @objc public func scaleSoundDataToFitScreen() -> [Swift.Float]
  @objc public func play(from url: Foundation.URL)
  @objc public func play(for duration: Foundation.TimeInterval)
  @objc public func pause()
  @objc public func stop()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoUploadingHandler : ObjectiveC.NSObject {
  open func getListWithType(_ type: ZiggeoSwiftFramework.Media_Type, data: [Swift.AnyHashable : Any]?, callback: @escaping (Foundation.NSArray?, Swift.Error?) -> Swift.Void)
  open func uploadWithType(_ type: ZiggeoSwiftFramework.Media_Type, path: Swift.String, data: [Swift.AnyHashable : Any]?)
  open func uploadWithType(_ type: ZiggeoSwiftFramework.Media_Type, path: Swift.String, data: [Swift.AnyHashable : Any]?, callback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?, progress: ((Swift.Int64, Swift.Int64) -> Swift.Void)?, confirmCallback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  open func uploadUrlWithType(_ type: ZiggeoSwiftFramework.Media_Type, path: Swift.String, data: [Swift.AnyHashable : Any]?, callback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?, progress: ((Swift.Int64, Swift.Int64) -> Swift.Void)?, confirmCallback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  open func updateWithType(_ type: ZiggeoSwiftFramework.Media_Type, path: Swift.String, data: [Swift.AnyHashable : Any]?, token: Swift.String, streamToken: Swift.String, callback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?, progress: ((Swift.Int64, Swift.Int64) -> Swift.Void)?, confirmCallback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?)
  open func deleteWithType(_ type: ZiggeoSwiftFramework.Media_Type, token: Swift.String, streamToken: Swift.String, callback: @escaping (Foundation.NSDictionary?, Swift.Error?) -> Swift.Void)
  open func downloadWithType(_ type: ZiggeoSwiftFramework.Media_Type, token: Swift.String, callback: @escaping (Swift.String) -> Swift.Void)
  open func getOriginalStreamDescriptionForVideo(_ token: Swift.String, data: Foundation.NSDictionary?, callback: ((Foundation.NSDictionary?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionTask
  @available(iOS 12.0, *)
  open func startScreenRecording(addRecordingButtonToView view: UIKit.UIView, frame: CoreGraphics.CGRect, appGroup: Swift.String)
  open func getImageForVideo(_ token: Swift.String, params: Foundation.NSDictionary, callback: @escaping (UIKit.UIImage?, Foundation.URLResponse?, Swift.Error?) -> Swift.Void)
  open func getImageForVideo(_ path: Swift.String, callback: @escaping (UIKit.UIImage?, Swift.Error?) -> Swift.Void)
  @objc deinit
  @objc override dynamic public init()
}
@objc final public class Chronometer : ObjectiveC.NSObject {
  final public var isPlaying: Swift.Bool
  final public var timerCurrentValue: Swift.Double
  final public var timerDidUpdate: ((Foundation.TimeInterval) -> ())?
  final public var timerDidComplete: (() -> ())?
  @objc public init(withTimeInterval timeInterval: Foundation.TimeInterval = 0.0)
  @objc final public func start(shouldFire fire: Swift.Bool = true)
  @objc final public func pause()
  @objc final public func stop()
  @objc override dynamic public init()
  @objc deinit
}
public enum XMLError : Swift.Error {
  case failToEncodeString
  case interruptedParseError(rawError: Swift.Error)
  case accessError(description: Swift.String)
}
@objc @_inheritsConvenienceInitializers open class ZiggeoPlayer : AVFoundation.AVPlayer, GoogleInteractiveMediaAds.IMAAdsLoaderDelegate, GoogleInteractiveMediaAds.IMAAdsManagerDelegate {
  public init(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String)
  @objc override dynamic public init()
  @objc override dynamic public init(playerItem: AVFoundation.AVPlayerItem?)
  @objc override dynamic public init(url: Foundation.URL)
  @objc deinit
  public class func createPlayerWithAdditionalParams(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (ZiggeoSwiftFramework.ZiggeoPlayer?) -> Swift.Void)
  public class func createPlayerItemWithAdditionalParams(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (AVFoundation.AVPlayerItem?) -> Swift.Void)
  public class func createPlayerForMultipleVideos(application: ZiggeoSwiftFramework.Ziggeo, videoTokens: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (AVFoundation.AVQueuePlayer?) -> Swift.Void)
  public class func createPlayerWithClientAuthToken(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (ZiggeoSwiftFramework.ZiggeoPlayer?) -> Swift.Void)
  public class func createPlayerWithServerAuthToken(application: ZiggeoSwiftFramework.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (ZiggeoSwiftFramework.ZiggeoPlayer?) -> Swift.Void)
  public func playWithAds(adTagURL: Swift.String, playerContainer: UIKit.UIView, playerViewController: AVKit.AVPlayerViewController)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData!)
  @objc public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader!, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData!)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent!)
  @objc public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!, didReceive error: GoogleInteractiveMediaAds.IMAAdError!)
  @objc public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
  @objc public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager!)
}
