// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.10 (swiftlang-5.10.0.13 clang-1500.3.9.4)
// swift-module-flags: -target x86_64-apple-ios15.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name ZiggeoMediaSwiftSDK
import AVFoundation
import AVKit
import Accelerate
import AssetsLibrary
import CoreLocation
import CoreMedia
import Foundation
import GoogleInteractiveMediaAds
import MediaPlayer
import MessageUI
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import ReplayKit
import Swift
import SystemConfiguration
import UIKit
@_exported import ZiggeoMediaSwiftSDK
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @_hasMissingDesignatedInitializers final public class ZiggeoUploadingHandler : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class PlayerConfig : ObjectiveC.NSObject {
  final public var style: ZiggeoMediaSwiftSDK.PlayerStyle
  final public var shouldShowSubtitles: Swift.Bool
  final public var shouldPreload: Swift.Bool
  final public var isMuted: Swift.Bool
  final public var isCachingEnabled: Swift.Bool
  final public var adsUri: Swift.String
  final public var extraArgs: [Swift.String : Any]
  final public func addExtraArgs(_ extraArgs: [Swift.String : Any])
  final public func toString() -> Swift.String
  final public func stringValueConfig() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
public protocol VideoPreviewDelegate : AnyObject {
  func retake(_ fileToBeRemoved: Foundation.URL)
  func uploadVideo(_ filePath: Foundation.URL)
}
public protocol VideoPreviewProtocol {
  var videoURL: Foundation.URL! { get set }
  var videoGravity: AVFoundation.AVLayerVideoGravity { get set }
  var previewDelegate: (any ZiggeoMediaSwiftSDK.VideoPreviewDelegate)? { get set }
}
@objc @_Concurrency.MainActor(unsafe) final public class ZiggeoRecordedVideoPreview : UIKit.UIViewController, ZiggeoMediaSwiftSDK.VideoPreviewProtocol {
  @_Concurrency.MainActor(unsafe) final public var videoURL: Foundation.URL!
  @_Concurrency.MainActor(unsafe) final public var videoGravity: AVFoundation.AVLayerVideoGravity
  @_Concurrency.MainActor(unsafe) weak final public var previewDelegate: (any ZiggeoMediaSwiftSDK.VideoPreviewDelegate)?
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) final public func killPlayer()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class ZiggeoRecorder : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) final public var videoPreview: any ZiggeoMediaSwiftSDK.VideoPreviewProtocol
  @_Concurrency.MainActor(unsafe) final public var recorderUIConfig: ZiggeoMediaSwiftSDK.RecorderInterfaceConfig
  @_Concurrency.MainActor(unsafe) final public var videoGravity: AVFoundation.AVLayerVideoGravity
  @_Concurrency.MainActor(unsafe) final public var showLightIndicator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public var showSoundIndicator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) final public func setVideoGravity(_ videoGravity: AVFoundation.AVLayerVideoGravity)
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String? = nil)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: any UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewWillDisappear(_ animated: Swift.Bool)
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder {
  @_Concurrency.MainActor(unsafe) final public func toggleVideoRecording()
  @_Concurrency.MainActor(unsafe) final public func startRecording()
  @_Concurrency.MainActor(unsafe) final public func stopRecording()
  @objc @_Concurrency.MainActor(unsafe) final public func updateStartDelay()
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.VideoPreviewDelegate {
  @_Concurrency.MainActor(unsafe) final public func retake(_ fileToBeRemoved: Foundation.URL)
  @_Concurrency.MainActor(unsafe) final public func uploadVideo(_ filePath: Foundation.URL)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.CoverSelectorDelegate {
  @_Concurrency.MainActor(unsafe) final public func coverSelected(_ videoPath: Swift.String, image: UIKit.UIImage?)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.H264EncoderDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func compressedVideoDataReceived(_ sampleBuffer: CoreMedia.CMSampleBuffer)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.AACEncoderDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func compressedAudioDataReceived(_ data: Foundation.Data, asc: Foundation.Data, pts: CoreMedia.CMTime)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.LiveStreamerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func onError(_ description: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc final public func onPublishStart()
  @_Concurrency.MainActor(unsafe) @objc final public func onPublishStop()
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class DeviceInfo : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class CacheConfig : ObjectiveC.NSObject {
  final public var maxCacheSize: Swift.Int
  final public var cacheRoot: Swift.String
  @objc override dynamic public init()
  final public func toString() -> Swift.String
  final public func stringValueConfig() -> Swift.String
  @objc deinit
}
@objc final public class Chronometer : ObjectiveC.NSObject {
  final public var isPlaying: Swift.Bool
  final public var timerCurrentValue: Swift.Double
  final public var timerDidUpdate: ((Foundation.TimeInterval) -> Swift.Void)?
  final public var timerDidComplete: (() -> Swift.Void)?
  @objc public init(withTimeInterval timeInterval: Foundation.TimeInterval = 0)
  @objc final public func start(shouldFire fire: Swift.Bool = true)
  @objc final public func pause()
  @objc final public func resume()
  @objc final public func stop()
  @objc deinit
}
public struct AspectRatio {
  public let mX: Swift.Int
  public let mY: Swift.Int
  public init(_ x: Swift.Int, _ y: Swift.Int)
}
final public class StopRecordingConfirmationDialogConfig {
  final public var titleText: Swift.String
  final public var mesText: Swift.String
  final public var posBtnText: Swift.String
  final public var negBtnText: Swift.String
  public init()
  final public func stringValueConfig() -> Swift.String
  @objc deinit
}
final public class PlayerStyle {
  final public var hideControls: Swift.Bool
  public init()
  @objc deinit
}
final public class RecorderInterfaceConfig {
  final public var recordButton: ZiggeoMediaSwiftSDK.ButtonConfig
  final public var closeButton: ZiggeoMediaSwiftSDK.ButtonConfig
  final public var pauseButton: ZiggeoMediaSwiftSDK.ButtonConfig
  final public var cameraFlipButton: ZiggeoMediaSwiftSDK.ButtonConfig
  public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ViewModel : ObjectiveC.NSObject {
  @objc public var audioFilePathLocal: Foundation.URL?
  @objc public var meteringLevels: [Swift.Float]?
  @objc public var audioMeteringLevelUpdate: ((Swift.Float) -> Swift.Void)?
  @objc public var audioDidFinish: (() -> Swift.Void)?
  @objc override dynamic public init()
  @objc public func askAudioRecordingPermission(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func startRecording(completion: @escaping (Foundation.URL?, [Swift.Float]?, (any Swift.Error)?) -> Swift.Void)
  @objc public func stopRecording() throws
  @objc public func pauseRecording() throws
  @objc public func resumeRecording() throws
  @objc public func resetRecording() throws
  @objc public func startPlaying() -> Swift.Double
  @objc public func setCurrentTime(_ currentTime: Foundation.TimeInterval)
  @objc public func pausePlaying() throws
  @objc deinit
}
@objc(BSImagePickerController) @objcMembers @_Concurrency.MainActor(unsafe) open class ImagePickerController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var imagePickerDelegate: (any ZiggeoMediaSwiftSDK.ImagePickerControllerDelegate)?
  @objc @_Concurrency.MainActor(unsafe) public var settings: ZiggeoMediaSwiftSDK.Settings
  @objc @_Concurrency.MainActor(unsafe) public var doneButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var albumButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var selectedAssets: [Photos.PHAsset] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var doneButtonTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public init(selectedAssets: [Photos.PHAsset] = [])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func deselect(asset: Photos.PHAsset)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CapturePreviewView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override public static var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class AssetStore : ObjectiveC.NSObject {
  @objc public var assets: [Photos.PHAsset] {
    get
  }
  @objc public init(assets: [Photos.PHAsset] = [])
  @objc public var count: Swift.Int {
    @objc get
  }
  @objc public var isEmpty: Swift.Bool {
    @objc get
  }
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ZiggeoVideos : ObjectiveC.NSObject, Foundation.NSFilePresenter {
  @objc final public var presentedItemURL: Foundation.URL?
  @objc final public var presentedItemOperationQueue: Foundation.OperationQueue
  final public func getVideoUrl(_ token: Swift.String) -> Swift.String
  final public func getImageUrl(_ token: Swift.String) -> Swift.String
  final public func attachVideo(_ token: Swift.String, streamToken: Swift.String, data: Foundation.NSDictionary?, file: Swift.String, callback: ((_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)?, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func createVideo(_ data: Foundation.NSDictionary?, file inputFilePath: Swift.String, cover: UIKit.UIImage? = nil, callback: ((_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)? = nil, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)? = nil) -> Foundation.URLSessionTask?
  final public func reRecordVideo(_ token: Swift.String, file: Swift.String, data: Foundation.NSDictionary?, callback: ((_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)?, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func index(_ data: [Swift.AnyHashable : Any], callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.Video], _ error: (any Swift.Error)?) -> Swift.Void)
  final public func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Video, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func createLiveVideoWithData(data: Foundation.NSDictionary, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func update(_ token: Swift.String, data: [Swift.AnyHashable : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Video?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func destroy(_ token: Swift.String, streamToken: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func confirmLiveStreaming(videoToken: Swift.String, streamToken: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func confirm(_ token: Swift.String, streamToken: Swift.String, data: [Swift.AnyHashable : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  final public func getImage(_ token: Swift.String, params: Foundation.NSDictionary, callback: @escaping (_ image: UIKit.UIImage?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func getImage(_ path: Swift.String, callback: @escaping (_ image: UIKit.UIImage?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func startScreenRecorder(appGroup: Swift.String, preferredExtension: Swift.String?)
  @objc final public func presentedItemDidChange()
  final public func getDefaultStream(_ token: Swift.String, data: Foundation.NSDictionary?, callback: ((_ streamToken: Swift.String?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func getOriginalStreamDescriptionForVideo(_ token: Swift.String, data: Foundation.NSDictionary?, callback: ((_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func createStream(_ token: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func createEmptyVideo(_ data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func recorderSubmit(_ token: Swift.String, streamToken: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func enforceImageForVideo(_ path: Swift.String, image: UIKit.UIImage)
  final public func attachCover(_ token: Swift.String, streamToken: Swift.String, cover: UIKit.UIImage?, data: Foundation.NSDictionary?, callback: ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)?) -> Foundation.URLSessionTask?
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AudioContext {
  final public let audioURL: Foundation.URL
  final public let totalSamples: Swift.Int
  final public let asset: AVFoundation.AVAsset
  final public let assetTrack: AVFoundation.AVAssetTrack
  public static func load(fromAudioURL audioURL: Foundation.URL, completionHandler: @escaping (_ audioContext: ZiggeoMediaSwiftSDK.AudioContext?) -> Swift.Void)
  final public func render(targetSamples: Swift.Int = 100) -> [Swift.Float]
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ImageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.ImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) public var animationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var highlightedAnimationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationDuration: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public var animationRepeatCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) public func startAnimating()
  @_Concurrency.MainActor(unsafe) public func stopAnimating()
  @_Concurrency.MainActor(unsafe) public var isAnimating: Swift.Bool {
    get
  }
}
public protocol CoverSelectorDelegate : AnyObject {
  func coverSelected(_ videoPath: Swift.String, image: UIKit.UIImage?)
}
@objc @_Concurrency.MainActor(unsafe) final public class CoverSelector : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) weak final public var delegate: (any ZiggeoMediaSwiftSDK.CoverSelectorDelegate)?
  @_Concurrency.MainActor(unsafe) @objc override final public var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) public init(videoPath: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public static func getDefaultCover(_ path: Swift.String, callback: ((_ cover: UIKit.UIImage?) -> Swift.Void)?)
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.CoverSelector : UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
}
extension ZiggeoMediaSwiftSDK.CoverSelector : UIKit.UITableViewDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Video : ZiggeoMediaSwiftSDK.ContentModel {
  @objc deinit
}
final public class ZiggeoConfig {
  final public var serverAPIUrl: Swift.String
  final public var cdnAPIUrl: Swift.String
  final public var devServerApiUrl: Swift.String
  final public var fileServerUrl: Swift.String
  final public var streamServerUrl: Swift.String
  public init(token: Swift.String)
  @objc deinit
}
@objc public enum SkipDirection : Swift.Int {
  case backward
  case forward
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers final public class TPGAudioPlayer : ObjectiveC.NSObject {
  @objc final public var isPlaying: Swift.Bool {
    @objc get
    @objc set
  }
  @objc final public var durationInSeconds: Swift.Double {
    @objc get
  }
  @objc final public var currentTimeInSeconds: Swift.Double {
    @objc get
  }
  @objc override dynamic public init()
  @objc final public func playPauseMediaFile(audioUrl: Foundation.URL, springboardInfo: [Swift.String : Swift.AnyObject], startTime: Swift.Double, completion: @escaping (_ previousItem: Swift.String?, _ stopTime: Swift.Double) -> Swift.Void)
  @objc final public func skipDirection(skipDirection: ZiggeoMediaSwiftSDK.SkipDirection, timeInterval: Swift.Double, offset: Swift.Double)
  @objc final public func seekPlayerToTime(value: Swift.Double, completion: (() -> Swift.Void)?)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ImageStream : ObjectiveC.NSObject {
  @objc deinit
}
public struct FileInfoData {
  public init(path: Swift.String, mimeType: Swift.String, name: Swift.String)
  public init(url: Foundation.URL, mimeType: Swift.String, name: Swift.String)
}
@objc @_hasMissingDesignatedInitializers final public class ZiggeoConnect : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  final public var clientAuthToken: Swift.String?
  final public var serverAuthToken: Swift.String?
  final public func applicationDidEnterBackground()
  @objc final public func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: (any Swift.Error)?)
  @objc final public func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  final public func appWakeupSignalTaskComplete(_ sessionID: Swift.String)
  final public func formatURLRequest(_ request: Foundation.URLRequest) -> Swift.String
  final public func uploadFileWithPath(_ path: Swift.String, parameters: Foundation.NSDictionary?, identifier: Swift.String, filePath: Swift.String, fileName: Swift.String, mimeType: Swift.String, fileExtension: Swift.String, callback: ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)?, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func backgroundUploadWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, identifier: Swift.String, file: Swift.String, callback: ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)?, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  final public func postRawDataWithPath(_ path: Swift.String, data: Foundation.Data, params: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func requestWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func requestStringWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ string: Swift.String?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func requestJSONWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func requestJSONArrayWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonArray: Foundation.NSArray?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func getWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func getStringWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ string: Swift.String?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func getJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func getJsonArrayWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonArray: Foundation.NSArray?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func postWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func postJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func deleteWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func deleteJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void) -> Foundation.URLSessionTask
  final public func addSessionData(_ data: Foundation.NSDictionary?, path: Swift.String, callback: @escaping (_ dataWithSessionData: Foundation.NSDictionary?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask
  final public func getSession(callback: @escaping (_ sessionKey: Swift.String?, _ sessionValue: Swift.String?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ZiggeoScreenRecorderSampleHandler : ReplayKit.RPBroadcastSampleHandler {
  open func getApplicationGroup() -> Swift.String
  @objc override dynamic public func broadcastStarted(withSetupInfo setupInfo: [Swift.String : ObjectiveC.NSObject]?)
  @objc override dynamic public func broadcastPaused()
  @objc override dynamic public func broadcastResumed()
  @objc override dynamic public func processSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, with sampleBufferType: ReplayKit.RPSampleBufferType)
  @objc override dynamic public func broadcastFinished()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class ZiggeoVideoEditor : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) final public func setUrl(_ urlString: Swift.String)
  @objc deinit
}
public struct MediaTypes : Swift.OptionSet {
  public let rawValue: Swift.Int
  public static let video: ZiggeoMediaSwiftSDK.MediaTypes
  public static let audio: ZiggeoMediaSwiftSDK.MediaTypes
  public static let image: ZiggeoMediaSwiftSDK.MediaTypes
  public init(rawValue: Swift.Int)
  public typealias ArrayLiteralElement = ZiggeoMediaSwiftSDK.MediaTypes
  public typealias Element = ZiggeoMediaSwiftSDK.MediaTypes
  public typealias RawValue = Swift.Int
}
public let UPDATE_DELAY: Swift.Int
public let HIGH_VOLUME: Swift.Int
public let MIDDLE_VOLUME: Swift.Int
public let LOW_VOLUME: Swift.Int
public let DEFAULT_SYNC_INTERVAL: Swift.Double
public let UPLOADING_ERROR_ACTION_CONTINUE_UPLOADING_MEDIA: Swift.Int
public let UPLOADING_ERROR_ACTION_RELOAD_MEDIA: Swift.Int
public let UPLOADING_ERROR_ACTION_ERROR_NOTIFICATION: Swift.Int
public let UPLOADING_ERROR_ACTION_DELETE_MEDIA: Swift.Int
public let DEFAULT_START_DELAY: Swift.Int
public let DEFAULT_AUDIO_BITRATE: Swift.Int
public let DEFAULT_AUDIO_SAMPLE_RATE: Swift.Int
public let SCREEN_LOCK_TAG: Swift.String
public let FACING_BACK: Swift.Int
public let FACING_FRONT: Swift.Int
public let QUALITY_HIGH: Swift.Int
public let QUALITY_MEDIUM: Swift.Int
public let QUALITY_LOW: Swift.Int
public let FLASH_OFF: Swift.Int
public let FLASH_ON: Swift.Int
public let FLASH_TORCH: Swift.Int
public let FLASH_AUTO: Swift.Int
public let FLASH_RED_EYE: Swift.Int
public let LANDSCAPE_90: Swift.Int
public let LANDSCAPE_270: Swift.Int
public let MAX_RESOLUTION_WIDTH_SUPPORTED: Swift.Int
public let MAX_RESOLUTION_HEIGHT_SUPPORTED: Swift.Int
public let DEFAULT_ASPECT_RATIO: ZiggeoMediaSwiftSDK.AspectRatio
public let FALLBACK_ASPECT_RATIO: ZiggeoMediaSwiftSDK.AspectRatio
public let RATIO_16_9: ZiggeoMediaSwiftSDK.AspectRatio
public let RATIO_4_3: ZiggeoMediaSwiftSDK.AspectRatio
public let RATIO_1_1: ZiggeoMediaSwiftSDK.AspectRatio
public let STATUS_EMPTY: Swift.String
public let STATUS_DELETED: Swift.String
public let STATUS_VERIFIED: Swift.String
public let STATUS_PROCESSING: Swift.String
public let STATUS_FAILED: Swift.String
public let STATUS_READY: Swift.String
public let ARG_PATH: Swift.String
public let ARG_TOKEN: Swift.String
public let ARG_IMAGE_MODE_ONLY: Swift.String
public let ARG_URI: Swift.String
public let ARG_COVER_SHOT_PATH: Swift.String
public let ARG_FORCE_SEND: Swift.String
public let ARG_SHOW_COVER_SHOT_SELECTION_POPUP: Swift.String
public let ARG_SHOW_STOP_RECORDING_CONFIRMATION: Swift.String
public let ARG_SHOW_CONFIRMATION_ON_PLAYER: Swift.String
public let ARG_FILE_TO_CONFIRM: Swift.String
public let ARG_SELECTED_FILTER: Swift.String
public let ARG_SELECTED_VIEW_MODE: Swift.String
public let ARG_PACKAGE_NAME: Swift.String
public let ARG_CLIENT_AUTH: Swift.String
public let ARG_SERVER_AUTH: Swift.String
public let ARG_DATA: Swift.String
@objc public protocol ZiggeoUploadingDelegate {
  @objc optional func preparingToUpload(_ path: Swift.String)
  @objc optional func uploadStarted(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, backgroundTask: Foundation.URLSessionTask)
  @objc optional func uploadProgress(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc optional func uploadFinished(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadVerified(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: (any Swift.Error)?, json: Foundation.NSDictionary?)
  @objc optional func uploadProcessing(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadProcessed(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func delete(_ token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: (any Swift.Error)?, json: Foundation.NSDictionary?)
  @objc optional func cancelUpload(_ path: Swift.String, deleteFile: Swift.Bool)
  @objc optional func cancelCurrentUpload(_ deleteFile: Swift.Bool)
  @objc optional func error(_ info: ZiggeoMediaSwiftSDK.RecordingInfo?, _ error: any Swift.Error, _ lostConnectionAction: Swift.Int)
  @objc optional func error(_ error: any Swift.Error)
}
@objc public protocol ZiggeoFileSelectorDelegate {
  @objc optional func uploadSelected(_ paths: [Swift.String])
  @objc optional func uploadCancelledByUser()
}
@objc public protocol ZiggeoHardwarePermissionDelegate {
  @objc optional func checkCameraPermission(_ granted: Swift.Bool)
  @objc optional func checkMicrophonePermission(_ granted: Swift.Bool)
  @objc optional func checkPhotoLibraryPermission(_ granted: Swift.Bool)
  @objc optional func checkHasCamera(_ hasCamera: Swift.Bool)
  @objc optional func checkHasMicrophone(_ hasMicrophone: Swift.Bool)
}
@objc public protocol ZiggeoRecorderDelegate {
  @objc optional func recorderReady()
  @objc optional func recorderCountdown(_ secondsLeft: Swift.Int)
  @objc optional func recorderStarted()
  @objc optional func recorderCurrentRecordedDurationSeconds(_ seconds: Swift.Double)
  @objc optional func recorderPaused()
  @objc optional func recorderStopped(_ path: Swift.String)
  @objc optional func recorderRerecord()
  @objc optional func recorderPlaying()
  @objc optional func recorderManuallySubmitted()
  @objc optional func streamingStarted()
  @objc optional func streamingStopped()
  @objc optional func recorderCancelledByUser()
}
@objc public protocol ZiggeoSensorDelegate {
  @objc optional func luxMeter(_ luminousity: Swift.Double)
  @objc optional func audioMeter(_ audioLevel: Swift.Double)
  @objc optional func faceDetected(_ faceID: Swift.Int, rect: CoreFoundation.CGRect)
}
@objc public protocol ZiggeoPlayerDelegate {
  @objc optional func playerPlaying()
  @objc optional func playerPaused()
  @objc optional func playerEnded()
  @objc optional func playerSeek(_ positionMillis: Swift.Double)
  @objc optional func playerReadyToPlay()
  @objc optional func playerCancelledByUser()
}
@objc public protocol ZiggeoQRScannerDelegate {
  @objc optional func qrCodeScaned(_ qrCode: Swift.String)
  @objc optional func qrCodeScanCancelledByUser()
}
@objc public protocol ZiggeoScreenRecorderDelegate {
}
@objc @_inheritsConvenienceInitializers final public class Ziggeo : ObjectiveC.NSObject {
  final public let token: Swift.String
  final public let config: ZiggeoMediaSwiftSDK.ZiggeoConfig
  final public var connect: ZiggeoMediaSwiftSDK.ZiggeoConnect!
  final public var cacheManager: ZiggeoMediaSwiftSDK.ZiggeoCacheManager!
  final public var enableDebugLogs: Swift.Bool
  final public var uploadingHandler: ZiggeoMediaSwiftSDK.ZiggeoUploadingHandler!
  final public var qrScannerDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoQRScannerDelegate)?
  final public var hardwarePermissionDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoHardwarePermissionDelegate)? {
    get
    set
  }
  final public var uploadingDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoUploadingDelegate)?
  final public var sensorDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoSensorDelegate)?
  final public var fileSelectorDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoFileSelectorDelegate)?
  final public var recorderDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoRecorderDelegate)?
  final public var playerDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoPlayerDelegate)?
  final public var screenRecorderDelegate: (any ZiggeoMediaSwiftSDK.ZiggeoScreenRecorderDelegate)?
  final public var videos: ZiggeoMediaSwiftSDK.ZiggeoVideos!
  final public var audios: ZiggeoMediaSwiftSDK.ZiggeoAudios!
  final public var images: ZiggeoMediaSwiftSDK.ZiggeoImages!
  final public var fileSelectorConfig: ZiggeoMediaSwiftSDK.FileSelectorConfig
  final public var uploadingConfig: ZiggeoMediaSwiftSDK.UploadingConfig
  final public var playerConfig: ZiggeoMediaSwiftSDK.PlayerConfig
  final public var qrScannerConfig: ZiggeoMediaSwiftSDK.QrScannerConfig
  final public var recorderConfig: ZiggeoMediaSwiftSDK.RecorderConfig
  final public var cacheConfig: ZiggeoMediaSwiftSDK.CacheConfig
  @objc override dynamic public init()
  public init(token: Swift.String)
  final public func sendLocalNotification(_ message: Swift.String)
  final public func getAppToken() -> Swift.String
  final public func getServerAuthToken() -> Swift.String
  final public func getClientAuthToken() -> Swift.String
  final public func setFileSelectorConfig(_ config: ZiggeoMediaSwiftSDK.FileSelectorConfig)
  final public func setUploadingConfig(_ config: ZiggeoMediaSwiftSDK.UploadingConfig)
  final public func setPlayerConfig(_ config: ZiggeoMediaSwiftSDK.PlayerConfig)
  final public func setQrScannerConfig(_ config: ZiggeoMediaSwiftSDK.QrScannerConfig)
  final public func setRecorderConfig(_ config: ZiggeoMediaSwiftSDK.RecorderConfig)
  final public func setCacheConfig(_ config: ZiggeoMediaSwiftSDK.CacheConfig)
  final public func sendReport(_ array: [Swift.String])
  final public func sendEmailToSupport()
  final public func sendEmailToSupport(subject: Swift.String, messageBody: Swift.String, file: ZiggeoMediaSwiftSDK.FileInfoData?)
  final public func log(_ message: Swift.String)
  final public func logError(_ message: Swift.String)
  final public func isNetworkConnected() -> Swift.Bool
  final public func isWifiConnected() -> Swift.Bool
  final public func record()
  final public func startScreenRecorder(appGroup: Swift.String, preferredExtension: Swift.String?)
  final public func trimVideo(_ videoUrl: Swift.String)
  final public func startImageRecorder()
  final public func startAudioRecorder()
  final public func uploadFromPaths(_ strUrls: [Swift.String], data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func uploadFromPaths(_ strUrl: Swift.String, data: [Swift.String : Any])
  final public func uploadFromPath(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func startFileSelector()
  final public func cancelUpload(_ path: Swift.String?, deleteFile: Swift.Bool)
  final public func playVideo(_ token: Swift.String)
  final public func playVideos(_ tokens: [Swift.String])
  final public func playFromUri(_ url: Swift.String)
  final public func playFromUris(_ urls: [Swift.String])
  final public func showImage(_ token: Swift.String)
  final public func showImages(_ tokens: [Swift.String])
  final public func showImageFromUri(_ url: Swift.String)
  final public func showImageFromUris(_ urls: [Swift.String])
  final public func playAudio(_ token: Swift.String)
  final public func playAudios(_ tokens: [Swift.String])
  final public func playAudioFromUri(_ url: Swift.String)
  final public func playAudioFromUris(_ urls: [Swift.String])
  final public func startAudioPlayer(_ token: Swift.String)
  final public func startQrScanner()
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.Ziggeo : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc final public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc final public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension ZiggeoMediaSwiftSDK.Ziggeo : MessageUI.MFMailComposeViewControllerDelegate {
  @objc final public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: (any Swift.Error)?)
}
extension ZiggeoMediaSwiftSDK.Ziggeo : ZiggeoMediaSwiftSDK.ReachabilityChangeDelegate {
  final public func reachabilityChanged(_ reachability: ZiggeoMediaSwiftSDK.Reachability)
}
public protocol ReachabilityChangeDelegate : AnyObject {
  func reachabilityChanged(_ reachability: ZiggeoMediaSwiftSDK.Reachability)
}
@objc @_inheritsConvenienceInitializers final public class ReachabilityManager : ObjectiveC.NSObject {
  final public var isNetworkAvailable: Swift.Bool {
    get
  }
  final public var reachabilityStatus: ZiggeoMediaSwiftSDK.Reachability.Connection
  final public let reachability: ZiggeoMediaSwiftSDK.Reachability
  weak final public var reachabilityChangeDelegate: (any ZiggeoMediaSwiftSDK.ReachabilityChangeDelegate)?
  final public func startMonitoring()
  final public func stopConnectionListener()
  final public func isNetworkConnected() -> Swift.Bool
  final public func isWifiConnected() -> Swift.Bool
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) final public class ZiggeoAudioRecorder : UIKit.UIViewController {
  public enum AudioRecorderState {
    case ready
    case recording
    case recordingPaused
    case recorded
    case playing
    case playingPaused
    public static func == (a: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState, b: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override final public func viewDidLoad()
  @_Concurrency.MainActor(unsafe) final public func setCurrentState(_ state: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState)
  @_Concurrency.MainActor(unsafe) final public func stopTimer()
  @_Concurrency.MainActor(unsafe) final public func getTimeString(_ time: Swift.Int) -> Swift.String
  @_Concurrency.MainActor(unsafe) final public func updateCurrentTimeText()
  @_Concurrency.MainActor(unsafe) final public func getAudioVisualizationMode() -> ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ZiggeoCacheManager : ObjectiveC.NSObject {
  final public func getCacheDirectory(_ type: ZiggeoMediaSwiftSDK.MediaTypes) -> Swift.String
  final public func getCacheFileName(_ type: ZiggeoMediaSwiftSDK.MediaTypes, token: Swift.String) -> Swift.String
  final public func getCacheFilePath(_ type: ZiggeoMediaSwiftSDK.MediaTypes, token: Swift.String) -> Swift.String
  final public func trimCache(_ type: ZiggeoMediaSwiftSDK.MediaTypes)
  final public func fileExists(_ filePath: Swift.String) -> Swift.Bool
  final public func removeFile(_ filePath: Swift.String)
  final public func getFileCreationDateWithDefaultDate(_ filePath: Swift.String) -> Foundation.Date?
  final public func getFileSize(_ filePath: Swift.String) -> Swift.UInt64?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Image : ZiggeoMediaSwiftSDK.ContentModel {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseNibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class RecordingInfo : ObjectiveC.NSObject {
  final public var token: Swift.String
  final public var fileType: Swift.Int
  final public var uploaded: Swift.Bool
  final public var verified: Swift.Bool
  final public var processed: Swift.Bool
  final public var failed: Swift.Bool
  final public var coverShot: UIKit.UIImage?
  final public var extraArgs: [Swift.String : Any]
  final public var urisForUploading: [Any]
  final public var uploadedParts: Swift.Int
  final public var uploadId: Swift.String
  final public var streamToken: Swift.String
  final public func addExtraArgs(_ extraArgs: [Swift.String : Any])
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class FileSelectorConfig : ObjectiveC.NSObject {
  final public var maxDuration: Swift.Double
  final public var minDuration: Swift.Double
  final public var shouldAllowMultipleSelection: Swift.Bool
  final public var mediaType: ZiggeoMediaSwiftSDK.MediaTypes
  final public var extraArgs: [Swift.String : Any]
  final public func addExtraArgs(_ extraArgs: [Swift.String : Any])
  final public func stringValueConfig() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func presentImagePicker(max: Swift.Int, mediaTypes: [Swift.String], maxDuration: Swift.Float = 0.0, minDuration: Swift.Float = 0.0, animated: Swift.Bool = true, select: ((_ asset: Photos.PHAsset) -> Swift.Void)?, deselect: ((_ asset: Photos.PHAsset) -> Swift.Void)?, cancel: (([Photos.PHAsset]) -> Swift.Void)?, finish: (([Photos.PHAsset]) -> Swift.Void)?, completion: (() -> Swift.Void)? = nil)
}
extension ZiggeoMediaSwiftSDK.ImagePickerController {
  @objc @_Concurrency.MainActor(unsafe) public static var currentAuthorization: Photos.PHAuthorizationStatus {
    @objc get
  }
}
extension ZiggeoMediaSwiftSDK.ImagePickerController : ZiggeoMediaSwiftSDK.ImagePickerControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
extension ZiggeoMediaSwiftSDK.ImagePickerController : UIKit.UIAdaptivePresentationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
extension Foundation.NSNotification.Name {
  public static let mediaLoadProgress: Foundation.Notification.Name
  public static let playerStalled: Foundation.Notification.Name
  public static let playerDidReachEnd: Foundation.Notification.Name
  public static let playerTimeDidChange: Foundation.Notification.Name
}
@objc @_hasMissingDesignatedInitializers final public class ZiggeoImages : ObjectiveC.NSObject {
  final public func getImageUrl(_ token: Swift.String) -> Swift.String
  final public func index(_ data: [Swift.AnyHashable : Any], callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.Image], _ error: (any Swift.Error)?) -> Swift.Void)
  final public func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Image, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func update(_ token: Swift.String, data: [Swift.AnyHashable : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Image?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func destroy(_ token: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers final public class ZiggeoAudios : ObjectiveC.NSObject {
  final public func getAudioUrl(_ token: Swift.String) -> Swift.String
  final public func index(_ data: [Swift.AnyHashable : Any], callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.Audio], _ error: (any Swift.Error)?) -> Swift.Void)
  final public func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Audio, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func update(_ token: Swift.String, data: [Swift.AnyHashable : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.Audio?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func destroy(_ token: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: (any Swift.Error)?) -> Swift.Void)
  final public func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers final public class UploadingConfig : ObjectiveC.NSObject {
  final public var syncInterval: Swift.Double {
    get
    set
  }
  final public var shouldTurnOffUploader: Swift.Bool
  final public var shouldUseWifiOnly: Swift.Bool
  final public var shouldStartAsForeground: Swift.Bool
  final public var lostConnectionAction: Swift.Int {
    get
    set
  }
  final public var extraArgs: [Swift.String : Any]
  final public func addExtraArgs(_ extraArgs: [Swift.String : Any])
  final public func stringValueConfig() -> Swift.String
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class Audio : ZiggeoMediaSwiftSDK.ContentModel {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BSImagePickerSettings) @objcMembers public class Settings : ObjectiveC.NSObject {
  @objc public static let shared: ZiggeoMediaSwiftSDK.Settings
  @objc @_inheritsConvenienceInitializers public class Theme : ObjectiveC.NSObject {
    public var backgroundColor: UIKit.UIColor {
      get
      set
    }
    public var dropDownBackgroundColor: UIKit.UIColor {
      get
      set
    }
    public var selectionFillColor: UIKit.UIColor {
      get
      set
    }
    public var selectionStrokeColor: UIKit.UIColor {
      get
      set
    }
    public var selectionShadowColor: UIKit.UIColor {
      get
      set
    }
    public enum SelectionStyle {
      case checked
      case numbered
      public static func == (a: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle, b: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var selectionStyle: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle {
      get
      set
    }
    public var previewTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var previewSubtitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var albumTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerSelection) @objcMembers public class Selection : ObjectiveC.NSObject {
    @objc public var max: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var min: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var unselectOnReachingMax: Swift.Bool {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerList) @objcMembers public class List : ObjectiveC.NSObject {
    @objc public var spacing: CoreFoundation.CGFloat {
      @objc get
      @objc set
    }
    @objc public var cellsPerRow: (_ verticalSize: UIKit.UIUserInterfaceSizeClass, _ horizontalSize: UIKit.UIUserInterfaceSizeClass) -> Swift.Int {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerFetch) @objcMembers public class Fetch : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc(BSImagePickerAlbum) @objcMembers public class Album : ObjectiveC.NSObject {
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc public var fetchResults: [Photos.PHFetchResult<Photos.PHAssetCollection>] {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(BSImagePickerAssets) @objcMembers public class Assets : ObjectiveC.NSObject {
      public enum MediaTypes {
        case image
        case video
        public static func == (a: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes, b: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var supportedMediaTypes: Swift.Set<ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes> {
        get
        set
      }
      @objc public var maxDuration: Swift.Float {
        @objc get
        @objc set
      }
      @objc public var minDuration: Swift.Float {
        @objc get
        @objc set
      }
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
      public var photoOptions: Photos.PHImageRequestOptions {
        get
        set
      }
      public var livePhotoOptions: Photos.PHLivePhotoRequestOptions {
        get
        set
      }
      public var videoOptions: Photos.PHVideoRequestOptions {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc public var album: ZiggeoMediaSwiftSDK.Settings.Fetch.Album {
      @objc get
      @objc set
    }
    @objc public var assets: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets {
      @objc get
      @objc set
    }
    @objc public var preview: ZiggeoMediaSwiftSDK.Settings.Fetch.Preview {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Dismiss : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    public var allowSwipe: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var theme: ZiggeoMediaSwiftSDK.Settings.Theme {
    @objc get
    @objc set
  }
  @objc public var selection: ZiggeoMediaSwiftSDK.Settings.Selection {
    @objc get
    @objc set
  }
  @objc public var list: ZiggeoMediaSwiftSDK.Settings.List {
    @objc get
    @objc set
  }
  @objc public var fetch: ZiggeoMediaSwiftSDK.Settings.Fetch {
    @objc get
    @objc set
  }
  @objc public var dismiss: ZiggeoMediaSwiftSDK.Settings.Dismiss {
    @objc get
    @objc set
  }
  @objc public var preview: ZiggeoMediaSwiftSDK.Settings.Preview {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class AudioVisualizationView : ZiggeoMediaSwiftSDK.BaseNibView {
  @objc public enum AudioVisualizationMode : Swift.Int {
    case read = 0
    case write = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarInterItem: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarSingleStick: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var audioVisualizationMode: ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode
  @_Concurrency.MainActor(unsafe) public var audioVisualizationTimeInterval: Swift.Double
  @_Concurrency.MainActor(unsafe) public var currentGradientPercentage: Swift.Float?
  @objc @_Concurrency.MainActor(unsafe) public var meteringLevels: [Swift.Float]? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientStartColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientEndColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func reset()
  @objc @_Concurrency.MainActor(unsafe) public func add(meteringLevel: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public func scaleSoundDataToFitScreen() -> [Swift.Float]
  @objc @_Concurrency.MainActor(unsafe) public func play(from url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func play(for duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) public func pause()
  @objc @_Concurrency.MainActor(unsafe) public func resume()
  @objc @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VideoStream : ObjectiveC.NSObject {
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class ButtonConfig {
  final public var imagePath: Swift.String?
  final public var selectedImagePath: Swift.String?
  final public var scale: CoreFoundation.CGFloat
  final public var width: CoreFoundation.CGFloat?
  final public var height: CoreFoundation.CGFloat?
  @objc deinit
}
public protocol ImagePickerControllerDelegate : AnyObject {
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@_inheritsConvenienceInitializers @objc public class SpringboardData : ObjectiveC.NSObject {
  @objc public func setupLockScreenElementsWithDictionary(infoDictionary: Foundation.NSDictionary)
  @objc public class func springboardDictionary(title: Swift.String, artist: Swift.String, duration: Swift.Int, listScreenTitle: Swift.String, imagePath: Swift.String) -> [Swift.String : Swift.AnyObject]
  @objc public func updateLockScreenCurrentTime(currentTime: Swift.Double)
  @objc override dynamic public init()
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class AudioStream : ObjectiveC.NSObject {
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ContentModel : ObjectiveC.NSObject {
  public var key: Swift.String!
  public var title: Swift.String!
  public var descript: Swift.String!
  public var stateString: Swift.String!
  public var token: Swift.String!
  public var streamToken: Swift.String!
  public var date: Swift.Double!
  public var duration: Swift.Double!
  public func getDescription() -> Swift.String
  public func setDescription(_ description: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) final public class CoverSelectorTableCell : UIKit.UITableViewCell {
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
final public class QrScannerConfig {
  final public var shouldCloseAfterSuccessfulScan: Swift.Bool
  public init()
  final public func stringValueConfig() -> Swift.String
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class VideoSize : ObjectiveC.NSObject {
  final public var width: Swift.Int
  final public var height: Swift.Int
  final public var aspectRatio: ZiggeoMediaSwiftSDK.AspectRatio
  @objc override dynamic public init()
  final public func getWidth() -> Swift.Int
  final public func getHeight() -> Swift.Int
  final public func getAspectRatio() -> ZiggeoMediaSwiftSDK.AspectRatio
  final public func setAspectRatio(_ aspectRatio: ZiggeoMediaSwiftSDK.AspectRatio)
  final public func equals(_ size: ZiggeoMediaSwiftSDK.VideoSize?) -> Swift.Bool
  final public func toString() -> Swift.String
  final public func compareTo(_ size: ZiggeoMediaSwiftSDK.VideoSize) -> Swift.Int
  @objc deinit
}
final public class CameraRecorderStyle {
  final public var hideControls: Swift.Bool
  public init()
  @objc deinit
}
final public class RecorderConfig {
  final public var style: ZiggeoMediaSwiftSDK.CameraRecorderStyle
  final public var shouldShowFaceOutline: Swift.Bool
  final public var faceOutlineDrawable: UIKit.UIImage?
  final public var isLiveStreaming: Swift.Bool
  final public var shouldAutoStartRecording: Swift.Bool
  final public var isImageOnlyMode: Swift.Bool
  final public var isPausedMode: Swift.Bool
  final public var startDelay: Swift.Int {
    get
    set
  }
  final public var shouldSendImmediately: Swift.Bool
  final public var shouldDisablePreview: Swift.Bool
  final public var shouldDisableCameraSwitch: Swift.Bool
  final public var videoQuality: Swift.Int {
    get
    set
  }
  final public var facing: Swift.Int
  final public var blurMode: Swift.Bool
  final public var maxDuration: Swift.Double {
    get
    set
  }
  final public var shouldEnableCoverShot: Swift.Bool
  final public var colorForStoppedCameraOverlay: UIKit.UIColor
  final public var drawableForStoppedCameraOverlay: UIKit.UIImage?
  final public var shouldConfirmStopRecording: Swift.Bool
  final public var resolution: ZiggeoMediaSwiftSDK.VideoSize {
    get
    set
  }
  final public var videoBitrate: Swift.Int
  final public var audioBitrate: Swift.Int {
    get
    set
  }
  final public var audioSampleRate: Swift.Int {
    get
    set
  }
  final public var cacheConfig: ZiggeoMediaSwiftSDK.CacheConfig
  final public var stopRecordingConfirmationDialogConfig: ZiggeoMediaSwiftSDK.StopRecordingConfirmationDialogConfig
  final public var extraArgs: [Swift.String : Any]
  public init()
  final public func updateVideoSize()
  final public func addExtraArgs(_ extraArgs: [Swift.String : Any])
  final public func stringValueConfig() -> Swift.String
  @objc deinit
}
public enum ReachabilityError : Swift.Error {
  case failedToCreateWithAddress(Darwin.sockaddr, Swift.Int32)
  case failedToCreateWithHostname(Swift.String, Swift.Int32)
  case unableToSetCallback(Swift.Int32)
  case unableToSetDispatchQueue(Swift.Int32)
  case unableToGetFlags(Swift.Int32)
}
@available(*, unavailable, renamed: "Notification.Name.reachabilityChanged")
public let ReachabilityChangedNotification: Foundation.NSNotification.Name
extension Foundation.NSNotification.Name {
  public static let reachabilityChanged: Foundation.Notification.Name
}
final public class Reachability {
  public typealias NetworkReachable = (ZiggeoMediaSwiftSDK.Reachability) -> Swift.Void
  public typealias NetworkUnreachable = (ZiggeoMediaSwiftSDK.Reachability) -> Swift.Void
  @available(*, unavailable, renamed: "Connection")
  public enum NetworkStatus : Swift.CustomStringConvertible {
    case notReachable, reachableViaWiFi, reachableViaWWAN
    public var description: Swift.String {
      get
    }
    public static func == (a: ZiggeoMediaSwiftSDK.Reachability.NetworkStatus, b: ZiggeoMediaSwiftSDK.Reachability.NetworkStatus) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  public enum Connection : Swift.CustomStringConvertible {
    @available(*, deprecated, renamed: "unavailable")
    case unknown
    case unavailable, wifi, cellular
    public var description: Swift.String {
      get
    }
    public static func == (a: ZiggeoMediaSwiftSDK.Reachability.Connection, b: ZiggeoMediaSwiftSDK.Reachability.Connection) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  final public var whenReachable: ZiggeoMediaSwiftSDK.Reachability.NetworkReachable?
  final public var whenUnreachable: ZiggeoMediaSwiftSDK.Reachability.NetworkUnreachable?
  @available(*, deprecated, renamed: "allowsCellularConnection")
  final public let reachableOnWWAN: Swift.Bool
  final public var allowsCellularConnection: Swift.Bool
  final public var notificationCenter: Foundation.NotificationCenter
  @available(*, deprecated, renamed: "connection.description")
  final public var currentReachabilityString: Swift.String {
    get
  }
  @available(*, unavailable, renamed: "connection")
  final public var currentReachabilityStatus: ZiggeoMediaSwiftSDK.Reachability.Connection {
    get
  }
  final public var connection: ZiggeoMediaSwiftSDK.Reachability.Connection {
    get
  }
  required public init(reachabilityRef: SystemConfiguration.SCNetworkReachability, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main)
  convenience public init(hostname: Swift.String, queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  convenience public init(queueQoS: Dispatch.DispatchQoS = .default, targetQueue: Dispatch.DispatchQueue? = nil, notificationQueue: Dispatch.DispatchQueue? = .main) throws
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.Reachability {
  final public func startNotifier() throws
  final public func stopNotifier()
  @available(*, deprecated, message: "Please use `connection != .unknown`")
  final public var isReachable: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .cellular`")
  final public var isReachableViaWWAN: Swift.Bool {
    get
  }
  @available(*, deprecated, message: "Please use `connection == .wifi`")
  final public var isReachableViaWiFi: Swift.Bool {
    get
  }
  final public var description: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers final public class ZiggeoPlayer : AVFoundation.AVQueuePlayer {
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String)
  @objc override dynamic public init()
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, playerItem: AVFoundation.AVPlayerItem?)
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, playerItems: [AVFoundation.AVPlayerItem])
  @objc deinit
  public static func createPlayerWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public static func createPlayerItemWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (_ item: AVFoundation.AVPlayerItem?) -> Swift.Void)
  public static func createQueuePlayerWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoTokens: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public static func createQueuePlayerWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoUrls: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public static func createPlayerForMultipleVideos(application: ZiggeoMediaSwiftSDK.Ziggeo, videoTokens: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (_ player: AVFoundation.AVQueuePlayer?) -> Swift.Void)
  public static func createPlayerWithClientAuthToken(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public static func createPlayerWithServerAuthToken(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  final public func playWithAds(adTagURL: Swift.String, playerContainer: UIKit.UIView, rootViewController: UIKit.UIViewController, playerViewController: AVKit.AVPlayerViewController)
}
extension ZiggeoMediaSwiftSDK.ZiggeoPlayer : GoogleInteractiveMediaAds.IMAAdsLoaderDelegate {
  @objc final public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData)
  @objc final public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData)
}
extension ZiggeoMediaSwiftSDK.ZiggeoPlayer : GoogleInteractiveMediaAds.IMAAdsManagerDelegate {
  @objc final public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent)
  @objc final public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive error: GoogleInteractiveMediaAds.IMAAdError)
  @objc final public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
  @objc final public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.RawRepresentable {}
@available(*, unavailable, renamed: "Connection")
extension ZiggeoMediaSwiftSDK.Reachability.NetworkStatus : Swift.Equatable {}
@available(*, unavailable, renamed: "Connection")
extension ZiggeoMediaSwiftSDK.Reachability.NetworkStatus : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Reachability.Connection : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Reachability.Connection : Swift.Hashable {}
