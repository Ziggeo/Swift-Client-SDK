// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
// swift-module-flags: -target arm64-apple-ios11.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name ZiggeoMediaSwiftSDK
// swift-module-flags-ignorable: -enable-bare-slash-regex
import AVFoundation
import AVKit
import Accelerate
import AssetsLibrary
import CoreLocation
import CoreMedia
import Foundation
import GoogleInteractiveMediaAds
import MediaPlayer
import MessageUI
import MobileCoreServices
import Photos
import PhotosUI
import QuartzCore
import ReplayKit
import Swift
import UIKit
import _Concurrency
import _StringProcessing
@_exported import __ObjC
import os
@objc open class ZiggeoConfig : ObjectiveC.NSObject {
  open var serverAPIUrl: Swift.String
  open var cdnAPIUrl: Swift.String
  open var devServerApiUrl: Swift.String
  open var fileServerUrl: Swift.String
  public init(token: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CoverSelectorTableCell : UIKit.UITableViewCell {
  @available(iOS 3.0, *)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(style: UIKit.UITableViewCell.CellStyle, reuseIdentifier: Swift.String?)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc final public class Chronometer : ObjectiveC.NSObject {
  final public var isPlaying: Swift.Bool
  final public var timerCurrentValue: Swift.Double
  final public var timerDidUpdate: ((Foundation.TimeInterval) -> ())?
  final public var timerDidComplete: (() -> ())?
  @objc public init(withTimeInterval timeInterval: Foundation.TimeInterval = 0.0)
  @objc final public func start(shouldFire fire: Swift.Bool = true)
  @objc final public func pause()
  @objc final public func resume()
  @objc final public func stop()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class ZiggeoAudioRecorder : UIKit.UIViewController {
  public enum AudioRecorderState {
    case ready
    case recording
    case recordingPaused
    case recorded
    case playing
    case playingPaused
    public static func == (a: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState, b: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState) -> Swift.Bool
    public func hash(into hasher: inout Swift.Hasher)
    public var hashValue: Swift.Int {
      get
    }
  }
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onClose(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onRerecord(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onRecord(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onPauseOrResume(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onUpload(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func timeChanged(_ sender: UIKit.UISlider)
  @_Concurrency.MainActor(unsafe) open func setCurrentState(_ state: ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState)
  @_Concurrency.MainActor(unsafe) open func stopTimer()
  @_Concurrency.MainActor(unsafe) open func getTimeString(_ time: Swift.Int) -> Swift.String
  @_Concurrency.MainActor(unsafe) open func updateCurrentTimeText()
  @_Concurrency.MainActor(unsafe) open func getImageFromResource(_ resourceName: Swift.String) -> UIKit.UIImage
  @_Concurrency.MainActor(unsafe) open func getAudioVisualizationMode() -> ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoImages : ObjectiveC.NSObject {
  open func getImageUrl(_ token: Swift.String) -> Swift.String
  open func index(_ data: [Swift.AnyHashable : Any]?, callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.ContentModel], _ error: Swift.Error?) -> Swift.Void)
  open func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func update(_ token: Swift.String, data: [Swift.AnyHashable : Any]?, callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func destroy(_ token: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers public class ContentModel : ObjectiveC.NSObject {
  public var key: Swift.String!
  public var title: Swift.String!
  public var desc: Swift.String!
  public var stateString: Swift.String!
  public var token: Swift.String!
  public var date: Swift.Double!
  public var duration: Swift.Double!
  @objc deinit
}
@_inheritsConvenienceInitializers @objc public class ViewModel : ObjectiveC.NSObject {
  @objc public var audioFilePathLocal: Foundation.URL?
  @objc public var meteringLevels: [Swift.Float]?
  @objc public var audioMeteringLevelUpdate: ((Swift.Float) -> ())?
  @objc public var audioDidFinish: (() -> ())?
  @objc override dynamic public init()
  @objc public func askAudioRecordingPermission(completion: ((Swift.Bool) -> Swift.Void)? = nil)
  @objc public func startRecording(completion: @escaping (Foundation.URL?, [Swift.Float]?, Swift.Error?) -> Swift.Void)
  @objc public func stopRecording() throws
  @objc public func pauseRecording() throws
  @objc public func resumeRecording() throws
  @objc public func resetRecording() throws
  @objc public func startPlaying() -> Swift.Double
  @objc public func setCurrentTime(_ currentTime: Foundation.TimeInterval)
  @objc public func pausePlaying() throws
  @objc deinit
}
public class ZiggeoRecorderInterfaceConfig {
  public var recordButton: ZiggeoMediaSwiftSDK.ButtonConfig
  public var closeButton: ZiggeoMediaSwiftSDK.ButtonConfig
  public var cameraFlipButton: ZiggeoMediaSwiftSDK.ButtonConfig
  public init()
  @objc deinit
}
@objc(BSImagePickerController) @objcMembers @_Concurrency.MainActor(unsafe) open class ImagePickerController : UIKit.UINavigationController {
  @_Concurrency.MainActor(unsafe) weak public var imagePickerDelegate: ZiggeoMediaSwiftSDK.ImagePickerControllerDelegate?
  @objc @_Concurrency.MainActor(unsafe) public var settings: ZiggeoMediaSwiftSDK.Settings
  @objc @_Concurrency.MainActor(unsafe) public var doneButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var cancelButton: UIKit.UIBarButtonItem
  @objc @_Concurrency.MainActor(unsafe) public var albumButton: UIKit.UIButton
  @objc @_Concurrency.MainActor(unsafe) public var selectedAssets: [Photos.PHAsset] {
    @objc get
  }
  @objc @_Concurrency.MainActor(unsafe) public var doneButtonTitle: Swift.String
  @objc @_Concurrency.MainActor(unsafe) public init(selectedAssets: [Photos.PHAsset] = [])
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc @_Concurrency.MainActor(unsafe) public func deselect(asset: Photos.PHAsset)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ButtonConfig {
  public var imagePath: Swift.String?
  public var selectedImagePath: Swift.String?
  public var scale: CoreFoundation.CGFloat
  public var width: CoreFoundation.CGFloat?
  public var height: CoreFoundation.CGFloat?
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_Concurrency.MainActor(unsafe) open class CapturePreviewView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic open class var layerClass: Swift.AnyClass {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
@objc @objcMembers public class AssetStore : ObjectiveC.NSObject {
  @objc public var assets: [Photos.PHAsset] {
    get
  }
  @objc public init(assets: [Photos.PHAsset] = [])
  @objc public var count: Swift.Int {
    @objc get
  }
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class AudioContext {
  final public let audioURL: Foundation.URL
  final public let totalSamples: Swift.Int
  final public let asset: AVFoundation.AVAsset
  final public let assetTrack: AVFoundation.AVAssetTrack
  public static func load(fromAudioURL audioURL: Foundation.URL, completionHandler: @escaping (_ audioContext: ZiggeoMediaSwiftSDK.AudioContext?) -> ())
  final public func render(targetSamples: Swift.Int = 100) -> [Swift.Float]
  @objc deinit
}
public protocol VideoPreviewDelegate {
  func retake(_ fileToBeRemoved: Foundation.URL!)
  func uploadVideo(_ filePath: Foundation.URL)
}
public protocol VideoPreviewProtocol {
  var videoURL: Foundation.URL! { get set }
  var previewDelegate: ZiggeoMediaSwiftSDK.VideoPreviewDelegate! { get set }
}
@objc @_Concurrency.MainActor(unsafe) open class ZiggeoRecordedVideoPreview : UIKit.UIViewController, ZiggeoMediaSwiftSDK.VideoPreviewProtocol {
  @_Concurrency.MainActor(unsafe) open var videoURL: Foundation.URL!
  @_Concurrency.MainActor(unsafe) open var previewDelegate: ZiggeoMediaSwiftSDK.VideoPreviewDelegate!
  @_Concurrency.MainActor(unsafe) @objc dynamic public init()
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) open func killPlayer()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor(unsafe) public class ImageView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var isUserInteractionEnabled: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var tintColor: UIKit.UIColor! {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public var contentMode: UIKit.UIView.ContentMode {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func layoutSubviews()
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.ImageView {
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?)
  @_Concurrency.MainActor(unsafe) convenience public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) open var animationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var highlightedAnimationImages: [UIKit.UIImage]? {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var animationDuration: Foundation.TimeInterval {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var animationRepeatCount: Swift.Int {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open func startAnimating()
  @_Concurrency.MainActor(unsafe) open func stopAnimating()
  @_Concurrency.MainActor(unsafe) open var isAnimating: Swift.Bool {
    get
  }
}
public let REAR_CAMERA: Swift.String
public let FRONT_CAMERA: Swift.String
public let HIGH_QUALITY: Swift.String
public let MEDIUM_QUALITY: Swift.String
public let LOW_QUALITY: Swift.String
public let ERR_UNKNOWN: Swift.String
public let ERR_DURATION_EXCEEDED: Swift.String
public let ERR_FILE_DOES_NOT_EXIST: Swift.String
public let ERR_PERMISSION_DENIED: Swift.String
public let ARG_DURATION: Swift.String
public let ARG_MEDIA_TYPE: Swift.String
public let ENFORCE_DURATION: Swift.String
public let CLOSE_AFTER_SUCCESS_FUL_SCAN: Swift.String
public enum Ziggeo_Status_Type : Swift.String {
  case STATUS_EMPTY
  case STATUS_DELETED
  case STATUS_VERIFIED
  case STATUS_PROCESSING
  case STATUS_FAILED
  case STATUS_READY
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Ziggeo_Key_Type : Swift.String {
  case BYTES_SENT
  case BYTES_TOTAL
  case FILE_NAME
  case PATH
  case QR
  case TOKEN
  case PERMISSIONS
  case SOUND_LEVEL
  case SECONDS_LEFT
  case MILLIS_PASSED
  case MILLIS
  case FILES
  case VALUE
  case MEDIA_TYPES
  case BLUR_EFFECT
  case CLIENT_AUTH
  case SERVER_AUTH
  case TAGS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
public enum Ziggeo_Theme_Key_Type : Swift.String {
  case KEY_HIDE_RECORDER_CONTROLS
  case KEY_HIDE_PLAYER_CONTROLS
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc public protocol ZiggeoUploadingDelegate {
  @objc optional func preparingToUpload(_ path: Swift.String)
  @objc optional func failedToUpload(_ path: Swift.String)
  @objc optional func uploadStarted(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, backgroundTask: Foundation.URLSessionTask)
  @objc optional func uploadProgress(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  @objc optional func uploadFinished(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadVerified(_ path: Swift.String, token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: Swift.Error?, json: Foundation.NSDictionary?)
  @objc optional func uploadProcessing(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func uploadProcessed(_ path: Swift.String, token: Swift.String, streamToken: Swift.String)
  @objc optional func delete(_ token: Swift.String, streamToken: Swift.String, response: Foundation.URLResponse?, error: Swift.Error?, json: Foundation.NSDictionary?)
  @objc optional func cancelUpload(_ path: Swift.String, deleteFile: Swift.Bool)
  @objc optional func cancelCurrentUpload(_ deleteFile: Swift.Bool)
}
@objc public protocol ZiggeoFileSelectorDelegate {
  @objc optional func uploadSelected(_ paths: [Swift.String])
  @objc optional func uploadCancelledByUser()
}
@objc public protocol ZiggeoHardwarePermissionDelegate {
  @objc optional func checkCameraPermission(_ granted: Swift.Bool)
  @objc optional func checkMicrophonePermission(_ granted: Swift.Bool)
  @objc optional func checkPhotoLibraryPermission(_ granted: Swift.Bool)
  @objc optional func checkHasCamera(_ hasCamera: Swift.Bool)
  @objc optional func checkHasMicrophone(_ hasMicrophone: Swift.Bool)
}
@objc public protocol ZiggeoRecorderDelegate {
  @objc optional func recorderReady()
  @objc optional func recorderCountdown(_ secondsLeft: Swift.Int)
  @objc optional func recorderStarted()
  @objc optional func recorderCurrentRecordedDurationSeconds(_ seconds: Swift.Double)
  @objc optional func recorderPaused()
  @objc optional func recorderStopped(_ path: Swift.String)
  @objc optional func recorderRerecord()
  @objc optional func recorderPlaying()
  @objc optional func recorderManuallySubmitted()
  @objc optional func streamingStarted()
  @objc optional func streamingStopped()
  @objc optional func recorderCancelledByUser()
}
@objc public protocol ZiggeoSensorDelegate {
  @objc optional func luxMeter(_ luminousity: Swift.Double)
  @objc optional func audioMeter(_ audioLevel: Swift.Double)
  @objc optional func faceDetected(_ faceID: Swift.Int, rect: CoreFoundation.CGRect)
}
@objc public protocol ZiggeoPlayerDelegate {
  @objc optional func playerPlaying()
  @objc optional func playerPaused()
  @objc optional func playerEnded()
  @objc optional func playerSeek(_ positionMillis: Swift.Double)
  @objc optional func playerReadyToPlay()
  @objc optional func playerCancelledByUser()
}
@objc public protocol ZiggeoQRScannerDelegate {
  @objc optional func qrCodeScaned(_ qrCode: Swift.String)
  @objc optional func qrCodeScanCancelledByUser()
}
@objc public protocol ZiggeoScreenRecorderDelegate {
}
public enum Media_Type : Swift.String {
  case Video
  case Audio
  case Image
  public init?(rawValue: Swift.String)
  public typealias RawValue = Swift.String
  public var rawValue: Swift.String {
    get
  }
}
@objc @_inheritsConvenienceInitializers open class Ziggeo : ObjectiveC.NSObject {
  final public let token: Swift.String
  final public let config: ZiggeoMediaSwiftSDK.ZiggeoConfig
  public var connect: ZiggeoMediaSwiftSDK.ZiggeoConnect!
  public var cacheManager: ZiggeoMediaSwiftSDK.ZiggeoCacheManager!
  public var enableDebugLogs: Swift.Bool
  public var uploadingHandler: ZiggeoMediaSwiftSDK.ZiggeoUploadingHandler!
  public var qrScannerDelegate: ZiggeoMediaSwiftSDK.ZiggeoQRScannerDelegate?
  public var hardwarePermissionDelegate: ZiggeoMediaSwiftSDK.ZiggeoHardwarePermissionDelegate? {
    get
    set
  }
  public var uploadingDelegate: ZiggeoMediaSwiftSDK.ZiggeoUploadingDelegate?
  public var sensorDelegate: ZiggeoMediaSwiftSDK.ZiggeoSensorDelegate?
  public var fileSelectorDelegate: ZiggeoMediaSwiftSDK.ZiggeoFileSelectorDelegate?
  public var recorderDelegate: ZiggeoMediaSwiftSDK.ZiggeoRecorderDelegate?
  public var playerDelegate: ZiggeoMediaSwiftSDK.ZiggeoPlayerDelegate?
  public var screenRecorderDelegate: ZiggeoMediaSwiftSDK.ZiggeoScreenRecorderDelegate?
  public var videos: ZiggeoMediaSwiftSDK.ZiggeoVideos!
  public var audios: ZiggeoMediaSwiftSDK.ZiggeoAudios!
  public var images: ZiggeoMediaSwiftSDK.ZiggeoImages!
  @objc override dynamic public init()
  public init(token: Swift.String)
  open func log(item: Swift.String)
  open func logError(item: Swift.String)
  open func startQrScanner(_ config: [Swift.String : Any]? = nil)
  public func recorderCacheConfig() -> [Swift.String : Any]
  public func recorderInterfaceConfig() -> [Swift.String : Any]
  public func uploadingConfig() -> [Swift.String : Any]
  public func extraArgsForRecorder() -> [Swift.String : Any]
  public func themeArgsForRecorder() -> [Swift.String : Any]
  public func extraArgsForPlayer() -> [Swift.String : Any]
  public func themeArgsForPlayer() -> [Swift.String : Any]
  public func playerCacheConfig() -> [Swift.String : Any]
  open func sendReport(_ array: [Swift.String])
  open func sendEmailToSupport()
  open func sendEmailToSupport(subject: Swift.String, messageBody: Swift.String, file: ZiggeoMediaSwiftSDK.FileInfoData?)
  open func setRecorderCacheConfig(_ config: [Swift.String : Any])
  open func setRecorderInterfaceConfig(_ config: [Swift.String : Any])
  open func setUploadingConfig(_ config: [Swift.String : Any])
  open func setLiveStreamingEnabled(_ enabled: Swift.Bool)
  open func setAutostartRecordingAfter(_ seconds: Swift.Int)
  open func setStartDelay(_ seconds: Swift.Int)
  open func setExtraArgsForRecorder(_ map: [Swift.String : Any])
  open func setThemeArgsForRecorder(_ map: [Swift.String : Any])
  open func setCoverSelectorEnabled(_ enabled: Swift.Bool)
  open func setMaxRecordingDuration(_ seconds: Swift.Int)
  open func setVideoWidth(_ width: Swift.Int)
  open func setVideoHeight(_ height: Swift.Int)
  open func setVideoBitrate(_ bitrate: Swift.Int)
  open func setAudioSampleRate(_ sampleRate: Swift.Int)
  open func setAudioBitrate(_ bitrate: Swift.Int)
  open func setCameraSwitchEnabled(_ enabled: Swift.Bool)
  open func setSendImmediately(_ sendImmediately: Swift.Bool)
  open func setQuality(_ quality: Swift.Int)
  open func setCamera(_ facing: Swift.String)
  open func setBlurMode(_ enabled: Swift.Bool)
  open func record()
  open func playVideo(_ tokens: [Swift.String])
  open func playFromUri(_ strUrls: [Swift.String])
  open func startImageRecorder()
  open func showImage(_ tokens: [Swift.String])
  open func showImage(paths: [Swift.String])
  open func startAudioRecorder()
  open func startAudioPlayer(_ tokens: [Swift.String])
  open func startAudioPlayer(urls: [Swift.String])
  open func startScreenRecorder(appGroup: Swift.String, preferredExtension: Swift.String?)
  open func trimVideo(_ videoUrl: Swift.String)
  open func uploadFromPaths(_ strUrls: [Swift.String], data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func uploadFromPath(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func uploadFromFileSelector(_ data: [Swift.String : Any])
  open func cancelUpload(_ path: Swift.String?, _ delete_file: Swift.Bool)
  open func setExtraArgsForPlayer(_ map: [Swift.String : Any])
  open func setThemeArgsForPlayer(_ map: [Swift.String : Any])
  open func setPlayerCacheConfig(_ config: [Swift.String : Any])
  open func setAdsURL(_ url: Swift.String)
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.Ziggeo : UIKit.UIImagePickerControllerDelegate, UIKit.UINavigationControllerDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerController(_ picker: UIKit.UIImagePickerController, didFinishPickingMediaWithInfo info: [UIKit.UIImagePickerController.InfoKey : Any])
  @_Concurrency.MainActor(unsafe) @objc dynamic public func imagePickerControllerDidCancel(_ picker: UIKit.UIImagePickerController)
}
extension ZiggeoMediaSwiftSDK.Ziggeo : MessageUI.MFMailComposeViewControllerDelegate {
  @objc dynamic public func mailComposeController(_ controller: MessageUI.MFMailComposeViewController, didFinishWith result: MessageUI.MFMailComposeResult, error: Swift.Error?)
}
public enum SkipDirection : Swift.Double {
  case backward, forward
  public init?(rawValue: Swift.Double)
  public typealias RawValue = Swift.Double
  public var rawValue: Swift.Double {
    get
  }
}
@objc @_inheritsConvenienceInitializers public class TPGAudioPlayer : ObjectiveC.NSObject {
  public var isPlaying: Swift.Bool {
    get
    set
  }
  public var durationInSeconds: Swift.Double {
    get
  }
  public class func sharedInstance() -> ZiggeoMediaSwiftSDK.TPGAudioPlayer
  public var currentTimeInSeconds: Swift.Double {
    get
  }
  @objc override dynamic public init()
  public func playPauseMediaFile(audioUrl: Foundation.NSURL, springboardInfo: Swift.Dictionary<Swift.String, Swift.AnyObject>, startTime: Swift.Double, completion: @escaping (_ previousItem: Swift.String?, _ stopTime: Swift.Double) -> ())
  public func skipDirection(skipDirection: ZiggeoMediaSwiftSDK.SkipDirection, timeInterval: Swift.Double, offset: Swift.Double)
  public func seekPlayerToTime(value: Swift.Double, completion: (() -> Swift.Void)!)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoConnect : ObjectiveC.NSObject, Foundation.URLSessionDataDelegate {
  open var clientAuthToken: Swift.String?
  open var serverAuthToken: Swift.String?
  open func applicationDidEnterBackground()
  @objc open func urlSession(_ session: Foundation.URLSession, dataTask: Foundation.URLSessionDataTask, didReceive data: Foundation.Data)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didCompleteWithError error: Swift.Error?)
  @objc open func urlSession(_ session: Foundation.URLSession, task: Foundation.URLSessionTask, didSendBodyData bytesSent: Swift.Int64, totalBytesSent: Swift.Int64, totalBytesExpectedToSend: Swift.Int64)
  open func appWakeupSignalTaskComplete(_ sessionID: Swift.String)
  open func formatURLRequest(_ request: Foundation.URLRequest) -> Swift.String
  open func uploadFileWithPath(_ path: Swift.String, parameters: Foundation.NSDictionary?, identifier: Swift.String, filePath: Swift.String, fileName: Swift.String, mimeType: Swift.String, fileExtension: Swift.String, callback: ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Foundation.NSError?) -> Swift.Void)?, progress: ((_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void)?) -> Foundation.URLSessionTask
  open func postRawDataWithPath(_ path: Swift.String, data: Foundation.Data, params: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestStringWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ string: Swift.String?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestJSONWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func requestJSONArrayWithMethod(_ method: Swift.String, path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonArray: Foundation.NSArray?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getStringWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ string: Swift.String?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func getJsonArrayWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonArray: Foundation.NSArray?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func postWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func postJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func deleteWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func deleteJsonWithPath(_ path: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func addSessionData(_ data: Foundation.NSDictionary?, path: Swift.String, callback: @escaping (_ dataWithSessionData: Foundation.NSDictionary?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask!
  open func getSession(callback: @escaping (_ sessionKey: Swift.String?, _ sessionValue: Swift.String?) -> Foundation.URLSessionTask) -> Foundation.URLSessionTask
  @objc deinit
}
@objc public class FileInfoData : ObjectiveC.NSObject {
  public init(path: Swift.String, mimeType: Swift.String, name: Swift.String)
  public init(url: Foundation.URL, mimeType: Swift.String, name: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class ZiggeoScreenRecorderSampleHandler : ReplayKit.RPBroadcastSampleHandler {
  open func getApplicationGroup() -> Swift.String
  @objc override dynamic public func broadcastStarted(withSetupInfo setupInfo: [Swift.String : ObjectiveC.NSObject]?)
  @objc override dynamic public func broadcastPaused()
  @objc override dynamic public func broadcastResumed()
  @objc override dynamic public func processSampleBuffer(_ sampleBuffer: CoreMedia.CMSampleBuffer, with sampleBufferType: ReplayKit.RPSampleBufferType)
  @objc override dynamic public func broadcastFinished()
  @objc override dynamic public init()
  @objc deinit
}
@objc @_Concurrency.MainActor(unsafe) open class ZiggeoVideoEditor : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoUrl: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func didReceiveMemoryWarning()
  @_Concurrency.MainActor(unsafe) open func setUrl(_ urlString: Swift.String)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoCacheManager : ObjectiveC.NSObject {
  open func getCacheDirectory(_ type: ZiggeoMediaSwiftSDK.Media_Type) -> Swift.String
  open func getCacheFileName(_ type: ZiggeoMediaSwiftSDK.Media_Type, token: Swift.String) -> Swift.String
  open func getCacheFilePath(_ type: ZiggeoMediaSwiftSDK.Media_Type, token: Swift.String) -> Swift.String
  open func trimCache(_ type: ZiggeoMediaSwiftSDK.Media_Type)
  open func fileExists(_ filePath: Swift.String) -> Swift.Bool
  open func removeFile(_ filePath: Swift.String)
  open func getFileCreationDateWithDefaultDate(_ filePath: Swift.String) -> Foundation.Date?
  open func getFileSize(_ filePath: Swift.String) -> Swift.UInt64?
  @objc deinit
}
public protocol CoverSelectorDelegate {
  func coverSelected(_ videoPath: Swift.String, image: UIKit.UIImage!)
}
@objc @_Concurrency.MainActor(unsafe) open class CoverSelector : UIKit.UIViewController, UIKit.UITableViewDelegate, UIKit.UITableViewDataSource {
  @_Concurrency.MainActor(unsafe) open var delegate: ZiggeoMediaSwiftSDK.CoverSelectorDelegate!
  @_Concurrency.MainActor(unsafe) public init(videoPath: Swift.String)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @_Concurrency.MainActor(unsafe) public static func getDefaultCover(_ path: Swift.String, callback: ((_ cover: UIKit.UIImage?) -> Swift.Void)?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var prefersStatusBarHidden: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, numberOfRowsInSection section: Swift.Int) -> Swift.Int
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, cellForRowAt indexPath: Foundation.IndexPath) -> UIKit.UITableViewCell
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, heightForRowAt indexPath: Foundation.IndexPath) -> CoreFoundation.CGFloat
  @_Concurrency.MainActor(unsafe) @objc open func tableView(_ tableView: UIKit.UITableView, didSelectRowAt indexPath: Foundation.IndexPath)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class BaseNibView : UIKit.UIView {
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func awakeFromNib()
  @objc deinit
}
@objc extension UIKit.UIViewController {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func presentImagePicker(max: Swift.Int, mediaTypes: [Swift.String], maxDuration: Swift.Float = 0.0, animated: Swift.Bool = true, select: ((_ asset: Photos.PHAsset) -> Swift.Void)?, deselect: ((_ asset: Photos.PHAsset) -> Swift.Void)?, cancel: (([Photos.PHAsset]) -> Swift.Void)?, finish: (([Photos.PHAsset]) -> Swift.Void)?, completion: (() -> Swift.Void)? = nil)
}
extension ZiggeoMediaSwiftSDK.ImagePickerController {
  @objc @_Concurrency.MainActor(unsafe) public static var currentAuthorization: Photos.PHAuthorizationStatus {
    @objc get
  }
}
extension ZiggeoMediaSwiftSDK.ImagePickerController : ZiggeoMediaSwiftSDK.ImagePickerControllerDelegate {
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  @objc @_Concurrency.MainActor(unsafe) dynamic public func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@objc @_Concurrency.MainActor(unsafe) open class ZiggeoRecorder : UIKit.UIViewController {
  @_Concurrency.MainActor(unsafe) open var coverSelectorEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var recordedVideoPreviewEnabled: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var cameraFlipButtonVisible: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var cameraDevice: UIKit.UIImagePickerController.CameraDevice
  @_Concurrency.MainActor(unsafe) open var videoPreview: ZiggeoMediaSwiftSDK.VideoPreviewProtocol!
  @_Concurrency.MainActor(unsafe) open var maxRecordedDurationSeconds: Swift.Double
  @_Concurrency.MainActor(unsafe) open var extraArgsForCreateVideo: [Swift.AnyHashable : Any]?
  @_Concurrency.MainActor(unsafe) open var duration: Swift.Double
  @_Concurrency.MainActor(unsafe) open var startDelay: Swift.Int
  @_Concurrency.MainActor(unsafe) open var blurMode: Swift.Bool
  @_Concurrency.MainActor(unsafe) open var recorderUIConfig: ZiggeoMediaSwiftSDK.ZiggeoRecorderInterfaceConfig
  @_Concurrency.MainActor(unsafe) open var showFaceOutline: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showLightIndicator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showSoundIndicator: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) open var showControls: Swift.Bool {
    get
    set
  }
  @_Concurrency.MainActor(unsafe) convenience public init(application: ZiggeoMediaSwiftSDK.Ziggeo)
  @_Concurrency.MainActor(unsafe) public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String!)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var preferredStatusBarStyle: UIKit.UIStatusBarStyle {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var shouldAutorotate: Swift.Bool {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open var supportedInterfaceOrientations: UIKit.UIInterfaceOrientationMask {
    @objc get
  }
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillTransition(to size: CoreFoundation.CGSize, with coordinator: UIKit.UIViewControllerTransitionCoordinator)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewWillAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidAppear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidDisappear(_ animated: Swift.Bool)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
  @_Concurrency.MainActor(unsafe) @objc override dynamic open func viewDidLoad()
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func onCloseButtonTap(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func changeCamera(_ sender: Swift.AnyObject)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func focusAndExposeTap(_ gestureRecognizer: UIKit.UIGestureRecognizer)
  @objc @IBAction @_Concurrency.MainActor(unsafe) open func toggleMovieRecording(_ sender: Swift.AnyObject)
  @_Concurrency.MainActor(unsafe) open func processRecordedVideo(outputFileURL: Foundation.URL!, error: Swift.Error!)
  @_Concurrency.MainActor(unsafe) open func focus(_ focusMode: AVFoundation.AVCaptureDevice.FocusMode, exposureMode: AVFoundation.AVCaptureDevice.ExposureMode, point: CoreFoundation.CGPoint, monitorSubjectAreaChange: Swift.Bool)
  @_Concurrency.MainActor(unsafe) open func setFlashMode(_ flashMode: AVFoundation.AVCaptureDevice.FlashMode, device: AVFoundation.AVCaptureDevice)
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : ZiggeoMediaSwiftSDK.VideoPreviewDelegate {
  @_Concurrency.MainActor(unsafe) open func retake(_ fileToBeRemoved: Foundation.URL!)
  @_Concurrency.MainActor(unsafe) open func uploadVideo(_ filePath: Foundation.URL)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : AVFoundation.AVCaptureAudioDataOutputSampleBufferDelegate, AVFoundation.AVCaptureVideoDataOutputSampleBufferDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func captureOutput(_ output: AVFoundation.AVCaptureOutput, didOutput sampleBuffer: CoreMedia.CMSampleBuffer, from connection: AVFoundation.AVCaptureConnection)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : AVFoundation.AVCaptureMetadataOutputObjectsDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic open func metadataOutput(_ output: AVFoundation.AVCaptureMetadataOutput, didOutput metadataObjects: [AVFoundation.AVMetadataObject], from connection: AVFoundation.AVCaptureConnection)
}
extension ZiggeoMediaSwiftSDK.ZiggeoRecorder : __ObjC.SelfieSegmentationDelegate {
  @_Concurrency.MainActor(unsafe) @objc dynamic public func selfieSegmentation(_ selfieSegmentation: __ObjC.SelfieSegmentation!, didOutputPixelBuffer pixelBuffer: CoreVideo.CVPixelBuffer!)
}
extension ZiggeoMediaSwiftSDK.ImagePickerController : UIKit.UIAdaptivePresentationControllerDelegate {
  @available(iOS 13, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerShouldDismiss(_ presentationController: UIKit.UIPresentationController) -> Swift.Bool
  @available(iOS 13, *)
  @_Concurrency.MainActor(unsafe) @objc dynamic public func presentationControllerDidDismiss(_ presentationController: UIKit.UIPresentationController)
}
extension Foundation.NSNotification.Name {
  public static let mediaLoadProgress: Foundation.Notification.Name
  public static let playerStalled: Foundation.Notification.Name
  public static let playerDidReachEnd: Foundation.Notification.Name
  public static let playerTimeDidChange: Foundation.Notification.Name
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoAudios : ObjectiveC.NSObject {
  open func getAudioUrl(_ token: Swift.String) -> Swift.String
  open func index(_ data: [Swift.AnyHashable : Any]?, callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.ContentModel], _ error: Swift.Error?) -> Swift.Void)
  open func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func update(_ token: Swift.String, data: [Swift.AnyHashable : Any]?, callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func destroy(_ token: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoVideos : ObjectiveC.NSObject, Foundation.NSFilePresenter {
  @objc public var presentedItemURL: Foundation.URL?
  @objc public var presentedItemOperationQueue: Foundation.OperationQueue
  open func getVideoUrl(_ token: Swift.String) -> Swift.String
  open func getImageUrl(_ token: Swift.String) -> Swift.String
  open func index(_ data: [Swift.AnyHashable : Any]?, callback: @escaping (_ array: [ZiggeoMediaSwiftSDK.ContentModel], _ error: Swift.Error?) -> Swift.Void)
  open func get(_ token: Swift.String, data: [Swift.String : Any], callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func create(_ strUrl: Swift.String, data: [Swift.String : Any], callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void, progress: @escaping (_ totalBytesSent: Swift.Int64, _ totalBytesExpectedToSend: Swift.Int64) -> Swift.Void, confirmCallback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func update(_ token: Swift.String, data: [Swift.AnyHashable : Any]?, callback: @escaping (_ content: ZiggeoMediaSwiftSDK.ContentModel?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func destroy(_ token: Swift.String, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func download(_ token: Swift.String, callback: @escaping (_ filePath: Swift.String) -> Swift.Void)
  open func getImage(_ token: Swift.String, params: Foundation.NSDictionary, callback: @escaping (_ image: UIKit.UIImage?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)
  open func getImage(_ path: Swift.String, callback: @escaping (_ image: UIKit.UIImage?, _ error: Swift.Error?) -> Swift.Void)
  open func startScreenRecorder(appGroup: Swift.String, preferredExtension: Swift.String?)
  @objc public func presentedItemDidChange()
  open func getDefaultStream(_ token: Swift.String, data: Foundation.NSDictionary?, callback: ((_ streamToken: Swift.String?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionTask
  open func getOriginalStreamDescriptionForVideo(_ token: Swift.String, data: Foundation.NSDictionary?, callback: ((_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionTask
  open func createStream(_ token: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func createEmptyVideo(_ data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func recorderSubmit(_ token: Swift.String, streamToken: Swift.String, data: Foundation.NSDictionary?, callback: @escaping (_ jsonObject: Foundation.NSDictionary?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void) -> Foundation.URLSessionTask
  open func enforceImageForVideo(_ path: Swift.String, image: UIKit.UIImage)
  open func attachCover(_ token: Swift.String, streamToken: Swift.String, cover: UIKit.UIImage?, data: Foundation.NSDictionary?, callback: ((_ data: Foundation.Data?, _ response: Foundation.URLResponse?, _ error: Swift.Error?) -> Swift.Void)?) -> Foundation.URLSessionTask?
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers open class ZiggeoUploadingHandler : ObjectiveC.NSObject {
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(BSImagePickerSettings) @objcMembers public class Settings : ObjectiveC.NSObject {
  @objc public static let shared: ZiggeoMediaSwiftSDK.Settings
  @objc @_inheritsConvenienceInitializers public class Theme : ObjectiveC.NSObject {
    public var backgroundColor: UIKit.UIColor {
      get
      set
    }
    public var dropDownBackgroundColor: UIKit.UIColor {
      get
      set
    }
    public var selectionFillColor: UIKit.UIColor {
      get
      set
    }
    public var selectionStrokeColor: UIKit.UIColor {
      get
      set
    }
    public var selectionShadowColor: UIKit.UIColor {
      get
      set
    }
    public enum SelectionStyle {
      case checked
      case numbered
      public static func == (a: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle, b: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle) -> Swift.Bool
      public func hash(into hasher: inout Swift.Hasher)
      public var hashValue: Swift.Int {
        get
      }
    }
    public var selectionStyle: ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle {
      get
      set
    }
    public var previewTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var previewSubtitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    public var albumTitleAttributes: [Foundation.NSAttributedString.Key : Any] {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerSelection) @objcMembers public class Selection : ObjectiveC.NSObject {
    @objc public var max: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var min: Swift.Int {
      @objc get
      @objc set
    }
    @objc public var unselectOnReachingMax: Swift.Bool {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerList) @objcMembers public class List : ObjectiveC.NSObject {
    @objc public var spacing: CoreFoundation.CGFloat {
      @objc get
      @objc set
    }
    @objc public var cellsPerRow: (_ verticalSize: UIKit.UIUserInterfaceSizeClass, _ horizontalSize: UIKit.UIUserInterfaceSizeClass) -> Swift.Int {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @_inheritsConvenienceInitializers @objc(BSImagePickerFetch) @objcMembers public class Fetch : ObjectiveC.NSObject {
    @_inheritsConvenienceInitializers @objc(BSImagePickerAlbum) @objcMembers public class Album : ObjectiveC.NSObject {
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc public var fetchResults: [Photos.PHFetchResult<Photos.PHAssetCollection>] {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @_inheritsConvenienceInitializers @objc(BSImagePickerAssets) @objcMembers public class Assets : ObjectiveC.NSObject {
      public enum MediaTypes {
        case image
        case video
        public static func == (a: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes, b: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes) -> Swift.Bool
        public func hash(into hasher: inout Swift.Hasher)
        public var hashValue: Swift.Int {
          get
        }
      }
      public var supportedMediaTypes: Swift.Set<ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes> {
        get
        set
      }
      @objc public var maxDuration: Swift.Float {
        @objc get
        @objc set
      }
      @objc public var options: Photos.PHFetchOptions {
        @objc get
        @objc set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc @_inheritsConvenienceInitializers public class Preview : ObjectiveC.NSObject {
      public var photoOptions: Photos.PHImageRequestOptions {
        get
        set
      }
      public var livePhotoOptions: Photos.PHLivePhotoRequestOptions {
        get
        set
      }
      public var videoOptions: Photos.PHVideoRequestOptions {
        get
        set
      }
      @objc override dynamic public init()
      @objc deinit
    }
    @objc public var album: ZiggeoMediaSwiftSDK.Settings.Fetch.Album {
      @objc get
      @objc set
    }
    @objc public var assets: ZiggeoMediaSwiftSDK.Settings.Fetch.Assets {
      @objc get
      @objc set
    }
    @objc public var preview: ZiggeoMediaSwiftSDK.Settings.Fetch.Preview {
      @objc get
      @objc set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc @_inheritsConvenienceInitializers public class Dismiss : ObjectiveC.NSObject {
    public var enabled: Swift.Bool {
      get
      set
    }
    public var allowSwipe: Swift.Bool {
      get
      set
    }
    @objc override dynamic public init()
    @objc deinit
  }
  @objc public var theme: ZiggeoMediaSwiftSDK.Settings.Theme {
    @objc get
    @objc set
  }
  @objc public var selection: ZiggeoMediaSwiftSDK.Settings.Selection {
    @objc get
    @objc set
  }
  @objc public var list: ZiggeoMediaSwiftSDK.Settings.List {
    @objc get
    @objc set
  }
  @objc public var fetch: ZiggeoMediaSwiftSDK.Settings.Fetch {
    @objc get
    @objc set
  }
  @objc public var dismiss: ZiggeoMediaSwiftSDK.Settings.Dismiss {
    @objc get
    @objc set
  }
  @objc public var preview: ZiggeoMediaSwiftSDK.Settings.Preview {
    @objc get
    @objc set
  }
  @objc override dynamic public init()
  @objc deinit
}
@_inheritsConvenienceInitializers @objc @_Concurrency.MainActor(unsafe) public class AudioVisualizationView : ZiggeoMediaSwiftSDK.BaseNibView {
  @objc public enum AudioVisualizationMode : Swift.Int {
    case read = 0
    case write = 1
    public init?(rawValue: Swift.Int)
    public typealias RawValue = Swift.Int
    public var rawValue: Swift.Int {
      get
    }
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarWidth: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarInterItem: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarCornerRadius: CoreFoundation.CGFloat {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var meteringLevelBarSingleStick: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @_Concurrency.MainActor(unsafe) public var audioVisualizationMode: ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode
  @_Concurrency.MainActor(unsafe) public var audioVisualizationTimeInterval: Swift.Double
  @_Concurrency.MainActor(unsafe) public var currentGradientPercentage: Swift.Float?
  @objc @_Concurrency.MainActor(unsafe) public var meteringLevels: [Swift.Float]? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientStartColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor(unsafe) public var gradientEndColor: UIKit.UIColor {
    @objc get
    @objc set
  }
  @_Concurrency.MainActor(unsafe) @objc dynamic public init(frame: CoreFoundation.CGRect)
  @_Concurrency.MainActor(unsafe) @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func draw(_ rect: CoreFoundation.CGRect)
  @objc @_Concurrency.MainActor(unsafe) public func reset()
  @objc @_Concurrency.MainActor(unsafe) public func add(meteringLevel: Swift.Float)
  @objc @_Concurrency.MainActor(unsafe) public func scaleSoundDataToFitScreen() -> [Swift.Float]
  @objc @_Concurrency.MainActor(unsafe) public func play(from url: Foundation.URL)
  @objc @_Concurrency.MainActor(unsafe) public func play(for duration: Foundation.TimeInterval)
  @objc @_Concurrency.MainActor(unsafe) public func pause()
  @objc @_Concurrency.MainActor(unsafe) public func resume()
  @objc @_Concurrency.MainActor(unsafe) public func stop()
  @objc deinit
}
@objc open class ZiggeoPlayer : AVFoundation.AVQueuePlayer {
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String)
  @objc override dynamic public init()
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, playerItem: AVFoundation.AVPlayerItem?)
  public init(application: ZiggeoMediaSwiftSDK.Ziggeo, playerItems: [AVFoundation.AVPlayerItem])
  @objc override dynamic public init(url: Foundation.URL)
  @objc deinit
  public class func createPlayerWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public class func createPlayerItemWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, videoUrl: Swift.String?, params: Foundation.NSDictionary?, callback: @escaping (_ item: AVFoundation.AVPlayerItem?) -> Swift.Void)
  public class func createQueuePlayerWithAdditionalParams(application: ZiggeoMediaSwiftSDK.Ziggeo, videoTokens: [Swift.String], videoUrls: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public class func createPlayerForMultipleVideos(application: ZiggeoMediaSwiftSDK.Ziggeo, videoTokens: [Swift.String], params: Foundation.NSDictionary?, callback: @escaping (_ player: AVFoundation.AVQueuePlayer?) -> Swift.Void)
  public class func createPlayerWithClientAuthToken(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public class func createPlayerWithServerAuthToken(application: ZiggeoMediaSwiftSDK.Ziggeo, videoToken: Swift.String, authToken: Swift.String, callback: @escaping (_ player: ZiggeoMediaSwiftSDK.ZiggeoPlayer?) -> Swift.Void)
  public func playWithAds(adTagURL: Swift.String, playerContainer: UIKit.UIView, rootViewController: UIKit.UIViewController, playerViewController: AVKit.AVPlayerViewController)
  @objc override dynamic open func observeValue(forKeyPath keyPath: Swift.String?, of object: Any?, change: [Foundation.NSKeyValueChangeKey : Any]?, context: Swift.UnsafeMutableRawPointer?)
}
extension ZiggeoMediaSwiftSDK.ZiggeoPlayer : GoogleInteractiveMediaAds.IMAAdsLoaderDelegate {
  @objc dynamic public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, adsLoadedWith adsLoadedData: GoogleInteractiveMediaAds.IMAAdsLoadedData)
  @objc dynamic public func adsLoader(_ loader: GoogleInteractiveMediaAds.IMAAdsLoader, failedWith adErrorData: GoogleInteractiveMediaAds.IMAAdLoadingErrorData)
}
extension ZiggeoMediaSwiftSDK.ZiggeoPlayer : GoogleInteractiveMediaAds.IMAAdsManagerDelegate {
  @objc dynamic public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive event: GoogleInteractiveMediaAds.IMAAdEvent)
  @objc dynamic public func adsManager(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager, didReceive error: GoogleInteractiveMediaAds.IMAAdError)
  @objc dynamic public func adsManagerDidRequestContentPause(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
  @objc dynamic public func adsManagerDidRequestContentResume(_ adsManager: GoogleInteractiveMediaAds.IMAAdsManager)
}
public protocol ImagePickerControllerDelegate : AnyObject {
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didSelectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didDeselectAsset asset: Photos.PHAsset)
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didFinishWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didCancelWithAssets assets: [Photos.PHAsset])
  func imagePicker(_ imagePicker: ZiggeoMediaSwiftSDK.ImagePickerController, didReachSelectionLimit count: Swift.Int)
}
@_hasMissingDesignatedInitializers public class SpringboardData {
  public func setupLockScreenElementsWithDictionary(infoDictionary: Foundation.NSDictionary)
  public class func springboardDictionary(title: Swift.String, artist: Swift.String, duration: Swift.Int, listScreenTitle: Swift.String, imagePath: Swift.String) -> Swift.Dictionary<Swift.String, Swift.AnyObject>
  public func updateLockScreenCurrentTime(currentTime: Swift.Double)
  @objc deinit
}
extension ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.ZiggeoAudioRecorder.AudioRecorderState : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Status_Type : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Status_Type : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Status_Type : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Key_Type : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Key_Type : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Key_Type : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Theme_Key_Type : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Theme_Key_Type : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Ziggeo_Theme_Key_Type : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.Media_Type : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Media_Type : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Media_Type : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.SkipDirection : Swift.RawRepresentable {}
extension ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Settings.Theme.SelectionStyle : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.Settings.Fetch.Assets.MediaTypes : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.Equatable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.Hashable {}
extension ZiggeoMediaSwiftSDK.AudioVisualizationView.AudioVisualizationMode : Swift.RawRepresentable {}
